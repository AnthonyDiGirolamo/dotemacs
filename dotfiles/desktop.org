#+STARTUP: content

* GTK & Gnome Settings

** GTK Icon Sizes for hidpi

   #+BEGIN_SRC sh
     xfconf-query -c xsettings -p /Gtk/IconSizes -s "gtk-menu=48,48:gtk-small-toolbar=48,48:gtk-large-toolbar=64,64:gtk-button=48,48:gtk-dnd=64,64:gtk-dialog=128,128"
     ToolbarIconSize 3
   #+END_SRC

** Gnome Window Modifier key

   #+BEGIN_SRC sh
     gsettings set org.gnome.desktop.wm.preferences resize-with-right-button true
     gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier '<Alt>'
   #+END_SRC


* Alacritty

  https://github.com/jwilm/alacritty

  #+BEGIN_SRC yaml :tangle "~/.config/alacritty/alacritty.yml" :mkdirp yes
    # Configuration for Alacritty, the GPU enhanced terminal emulator


    # Any items in the `env` entry below will be added as
    # environment variables. Some entries may override variables
    # set by alacritty it self.
    env:
      # TERM env customization.
      #
      # If this property is not set, alacritty will set it to xterm-256color.
      #
      # Note that some xterm terminfo databases don't declare support for italics.
      # You can verify this by checking for the presence of `smso` and `sitm` in
      # `infocmp xterm-256color`.
      TERM: xterm-256color

    # Window dimensions in character columns and lines
    # (changes require restart)
    window:
      dimensions:
        columns: 80
        lines: 24

    # Adds this many blank pixels of padding around the window
    # Units are physical pixels; this is not DPI aware.
    # (change requires restart)
      padding:
        x: 2
        y: 2

    # Display tabs using this many cells (changes require restart)
    tabspaces: 8

    # When true, bold text is drawn using the bright variant of colors.
    draw_bold_text_with_bright_colors: true

    # Font configuration (changes require restart)
    #
    # Important font attributes like antialiasing, subpixel aa, and hinting can be
    # controlled through fontconfig. Specifically, the following attributes should
    # have an effect:
    #
    # * hintstyle
    # * antialias
    # * lcdfilter
    # * rgba
    #
    # For instance, if you wish to disable subpixel antialiasing, you might set the
    # rgba property to "none". If you wish to completely disable antialiasing, you
    # can set antialias to false.
    #
    # Please see these resources for more information on how to use fontconfig
    #
    # * https://wiki.archlinux.org/index.php/font_configuration#Fontconfig_configuration
    # * file:///usr/share/doc/fontconfig/fontconfig-user.html
    font:
      # The normal (roman) font face to use.
      normal:
        family: PragmataProMono # should be "Menlo" or something on macOS.
        # Style can be specified to pick a specific face.
        # style: Regular

      # The bold font face
      bold:
        family: PragmataProMono # should be "Menlo" or something on macOS.
        # Style can be specified to pick a specific face.
        # style: Bold

      # The italic font face
      italic:
        family: PragmataProMono # should be "Menlo" or something on macOS.
        # Style can be specified to pick a specific face.
        # style: Italic

      # Point size of the font
      size: 16.0

      # Offset is the extra space around each character. offset.y can be thought of
      # as modifying the linespacing, and offset.x as modifying the letter spacing.
      offset:
        x: -1
        y: 0

      # Glyph offset determines the locations of the glyphs within their cells with
      # the default being at the bottom. Increase the x offset to move the glyph to
      # the right, increase the y offset to move the glyph upward.
      glyph_offset:
        x: 0
        y: 0

      # OS X only: use thin stroke font rendering. Thin strokes are suitable
      # for retina displays, but for non-retina you probably want this set to
      # false.
      use_thin_strokes: true

    # Colors (Tomorrow Night Bright)
    colors:
      # Default colors
      primary:
        background: '0x2d2d2d'
        foreground: '0xd3d0c8'

      # Colors the cursor will use if `custom_cursor_colors` is true
      cursor:
        cursor: '0x00FFFF'
        text: '0x2d2d2d'

      # Normal colors
      normal:
        black:   '0x000000'
        red:     '0xf2777a'
        green:   '0x99cc99'
        yellow:  '0xffcc66'
        blue:    '0x6699cc'
        magenta: '0xc397d8'
        cyan:    '0x66cccc'
        white:   '0xf2f0ec'

      # Bright colors
      bright:
        black:   '0x666666'
        red:     '0xff3334'
        green:   '0x9ec400'
        yellow:  '0xe7c547'
        blue:    '0x7aa6da'
        magenta: '0xb77ee0'
        cyan:    '0x54ced6'
        white:   '0xffffff'

      # Dim colors (Optional)
      dim:
        black:   '0x333333'
        red:     '0xf2777a'
        green:   '0x99cc99'
        yellow:  '0xffcc66'
        blue:    '0x6699cc'
        magenta: '0xcc99cc'
        cyan:    '0x66cccc'
        white:   '0xdddddd'

    # Visual Bell
    #
    # Any time the BEL code is received, Alacritty "rings" the visual bell. Once
    # rung, the terminal background will be set to white and transition back to the
    # default background color. You can control the rate of this transition by
    # setting the `duration` property (represented in milliseconds). You can also
    # configure the transition function by setting the `animation` property.
    #
    # Possible values for `animation`
    # `Ease`
    # `EaseOut`
    # `EaseOutSine`
    # `EaseOutQuad`
    # `EaseOutCubic`
    # `EaseOutQuart`
    # `EaseOutQuint`
    # `EaseOutExpo`
    # `EaseOutCirc`
    # `Linear`
    #
    # To completely disable the visual bell, set its duration to 0.
    #
    visual_bell:
      animation: EaseOutExpo
      duration: 0

    # Background opacity
    background_opacity: 1.0

    # Key bindings
    #
    # Each binding is defined as an object with some properties. Most of the
    # properties are optional. All of the alphabetical keys should have a letter for
    # the `key` value such as `V`. Function keys are probably what you would expect
    # as well (F1, F2, ..). The number keys above the main keyboard are encoded as
    # `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
    # etc.  These all match the glutin::VirtualKeyCode variants.
    #
    # Possible values for `mods`
    # `Command`, `Super` refer to the super/command/windows key
    # `Control` for the control key
    # `Shift` for the Shift key
    # `Alt` and `Option` refer to alt/option
    #
    # mods may be combined with a `|`. For example, requiring control and shift
    # looks like:
    #
    # mods: Control|Shift
    #
    # The parser is currently quite sensitive to whitespace and capitalization -
    # capitalization must match exactly, and piped items must not have whitespace
    # around them.
    #
    # Either an `action`, `chars`, or `command` field must be present.
    #   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
    #   `chars` writes the specified string every time that binding is activated.
    #     These should generally be escape sequences, but they can be configured to
    #     send arbitrary strings of bytes.
    #   `command` must be a map containing a `program` string, and `args` array of
    #     strings. For example:
    #     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
    #
    # Want to add a binding (e.g. "PageUp") but are unsure what the X sequence
    # (e.g. "\x1b[5~") is? Open another terminal (like xterm) without tmux,
    # then run `showkey -a` to get the sequence associated to a key combination.
    key_bindings:
      - { key: V,        mods: Control|Shift,    action: Paste               }
      - { key: C,        mods: Control|Shift,    action: Copy                }
      - { key: Q,        mods: Command, action: Quit                         }
      - { key: W,        mods: Command, action: Quit                         }
      - { key: Insert,   mods: Shift,   action: PasteSelection               }
      - { key: Key0,     mods: Control, action: ResetFontSize                }
      - { key: Equals,   mods: Control, action: IncreaseFontSize             }
      - { key: Subtract, mods: Control, action: DecreaseFontSize             }
      - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
      - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
      - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
      - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
      - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
      - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
      - { key: PageUp,                  chars: "\x1b[5~"                     }
      - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
      - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
      - { key: PageDown,                chars: "\x1b[6~"                     }
      - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
      - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
      - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
      - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
      - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
      - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
      - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
      - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
      - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
      - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
      - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
      - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
      - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
      - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
      - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
      - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
      - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
      - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
      - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
      - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
      - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
      - { key: F1,                      chars: "\x1bOP"                      }
      - { key: F2,                      chars: "\x1bOQ"                      }
      - { key: F3,                      chars: "\x1bOR"                      }
      - { key: F4,                      chars: "\x1bOS"                      }
      - { key: F5,                      chars: "\x1b[15~"                    }
      - { key: F6,                      chars: "\x1b[17~"                    }
      - { key: F7,                      chars: "\x1b[18~"                    }
      - { key: F8,                      chars: "\x1b[19~"                    }
      - { key: F9,                      chars: "\x1b[20~"                    }
      - { key: F10,                     chars: "\x1b[21~"                    }
      - { key: F11,                     chars: "\x1b[23~"                    }
      - { key: F12,                     chars: "\x1b[24~"                    }
      - { key: Back,                    chars: "\x7f"                        }
      - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
      - { key: Insert,                  chars: "\x1b[2~"                     }
      - { key: Delete,                  chars: "\x1b[3~"                     }

    # Mouse bindings
    #
    # Currently doesn't support modifiers. Both the `mouse` and `action` fields must
    # be specified.
    #
    # Values for `mouse`:
    # - Middle
    # - Left
    # - Right
    # - Numeric identifier such as `5`
    #
    # Values for `action`:
    # - Paste
    # - PasteSelection
    # - Copy (TODO)
    mouse_bindings:
      - { mouse: Middle, action: PasteSelection }

    mouse:
      double_click: { threshold: 300 }
      triple_click: { threshold: 300 }

    selection:
      semantic_escape_chars: ",│`|:\"' ()[]{}<>"

    # Live config reload (changes require restart)
    live_config_reload: true

    # Shell
    #
    # You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
    # Entries in shell.args are passed unmodified as arguments to the shell.
    #shell:
    #  program: /bin/bash
    #  args:
    #    - --login
  #+END_SRC


* Compton

  #+BEGIN_SRC yaml :tangle "~/.compton.conf"
    backend = "glx";
    paint-on-overlay = true;
    glx-no-stencil = true;
    glx-no-rebind-pixmap = true;
    vsync = "opengl-swc";

    # These are important. The first one enables the opengl backend. The last one is the vsync method. Depending on the driver you might need to use a different method.
    # The other options are smaller performance tweaks that work well in most cases.
    # You can find the rest of the options here: https://github.com/chjj/compton/wiki/perf-guide, and here: https://github.com/chjj/compton/wiki/vsync-guide


    # Shadow
    shadow = true;			# Enabled client-side shadows on windows.
    no-dock-shadow = true;		# Avoid drawing shadows on dock/panel windows.
    no-dnd-shadow = true;		# Don't draw shadows on DND windows.
    clear-shadow = true;		# Zero the part of the shadow's mask behind the window (experimental).
    shadow-radius = 7;		# The blur radius for shadows. (default 12)
    shadow-offset-x = -7;		# The left offset for shadows. (default -15)
    shadow-offset-y = -7;		# The top offset for shadows. (default -15)
    shadow-exclude = [
     "! name~=''",
     "n:e:Notification",
     "n:e:Plank",
     "n:e:Docky",
     "g:e:Synapse",
     "g:e:Kupfer",
     "g:e:Conky",
     "n:w:*Firefox*",
     "n:w:*Chrome*",
     "n:w:*Chromium*",
     "class_g ?= 'Notify-osd'",
     "class_g ?= 'Cairo-dock'",
     "class_g ?= 'Xfce4-notifyd'",
     "class_g ?= 'Xfce4-power-manager'"
    ];

    # The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches
    # (most applications are fine, only apps that do weird things with xshapes or argb are affected).
    # This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.

    # Fading
    fading = false; # Fade windows during opacity changes.
    fade-delta = 4; # The time between steps in a fade in milliseconds. (default 10).
    fade-in-step = 0.03; # Opacity change between steps while fading in. (default 0.028).
    fade-out-step = 0.03; # Opacity change between steps while fading out. (default 0.03).
    #no-fading-openclose = true; # Fade windows in/out when opening/closing

    detect-client-opacity = true; # This prevents opacity being ignored for some apps. For example without this enabled my xfce4-notifyd is 100% opacity no matter what.

    # Window type settings
    wintypes:
    {
      tooltip = { fade = true; shadow = false; };
    };
  #+END_SRC


* Dunst

#+BEGIN_SRC conf :tangle "~/.config/dunst/dunstrc" :mkdirp yes
  [global]
      ### Display ###

      # Which monitor should the notifications be displayed on.
      monitor = 0

      # Display notification on focused monitor.  Possible modes are:
      #   mouse: follow mouse pointer
      #   keyboard: follow window with keyboard focus
      #   none: don't follow anything
      #
      # "keyboard" needs a window manager that exports the
      # _NET_ACTIVE_WINDOW property.
      # This should be the case for almost all modern window managers.
      #
      # If this option is set to mouse or keyboard, the monitor option
      # will be ignored.
      follow = mouse

      # The geometry of the window:
      #   [{width}]x{height}[+/-{x}+/-{y}]
      # The geometry of the message window.
      # The height is measured in number of notifications everything else
      # in pixels.  If the width is omitted but the height is given
      # ("-geometry x2"), the message window expands over the whole screen
      # (dmenu-like).  If width is 0, the window expands to the longest
      # message displayed.  A positive x is measured from the left, a
      # negative from the right side of the screen.  Y is measured from
      # the top and down respectively.
      # The width can be negative.  In this case the actual width is the
      # screen width minus the width defined in within the geometry option.
      geometry = "300x5-30+20"

      # Show how many messages are currently hidden (because of geometry).
      indicate_hidden = yes

      # Shrink window if it's smaller than the width.  Will be ignored if
      # width is 0.
      shrink = no

      # The transparency of the window.  Range: [0; 100].
      # This option will only work if a compositing window manager is
      # present (e.g. xcompmgr, compiz, etc.).
      transparency = 0

      # The height of the entire notification.  If the height is smaller
      # than the font height and padding combined, it will be raised
      # to the font height and padding.
      notification_height = 0

      # Draw a line of "separator_height" pixel height between two
      # notifications.
      # Set to 0 to disable.
      separator_height = 2

      # Padding between text and separator.
      padding = 8

      # Horizontal padding.
      horizontal_padding = 8

      # Defines width in pixels of frame around the notification window.
      # Set to 0 to disable.
      frame_width = 3

      # Defines color of the frame around the notification window.
      frame_color = "#5b6268"

      # Define a color for the separator.
      # possible values are:
      #  * auto: dunst tries to find a color fitting to the background;
      #  * foreground: use the same color as the foreground;
      #  * frame: use the same color as the frame;
      #  * anything else will be interpreted as a X color.
      separator_color = frame

      # Sort messages by urgency.
      sort = yes

      # Don't remove messages, if the user is idle (no mouse or keyboard input)
      # for longer than idle_threshold seconds.
      # Set to 0 to disable.
      idle_threshold = 120

      ### Text ###

      font = Roboto Light 14

      # The spacing between lines.  If the height is smaller than the
      # font height, it will get raised to the font height.
      line_height = 0

      # Possible values are:
      # full: Allow a small subset of html markup in notifications:
      #        <b>bold</b>
      #        <i>italic</i>
      #        <s>strikethrough</s>
      #        <u>underline</u>
      #
      #        For a complete reference see
      #        <http://developer.gnome.org/pango/stable/PangoMarkupFormat.html>.
      #
      # strip: This setting is provided for compatibility with some broken
      #        clients that send markup even though it's not enabled on the
      #        server. Dunst will try to strip the markup but the parsing is
      #        simplistic so using this option outside of matching rules for
      #        specific applications *IS GREATLY DISCOURAGED*.
      #
      # no:    Disable markup parsing, incoming notifications will be treated as
      #        plain text. Dunst will not advertise that it has the body-markup
      #        capability if this is set as a global setting.
      #
      # It's important to note that markup inside the format option will be parsed
      # regardless of what this is set to.
      markup = full

      # The format of the message.  Possible variables are:
      #   %a  appname
      #   %s  summary
      #   %b  body
      #   %i  iconname (including its path)
      #   %I  iconname (without its path)
      #   %p  progress value if set ([  0%] to [100%]) or nothing
      #   %n  progress value if set without any extra characters
      # Markup is allowed
      format = "<b>%s</b>\n%b"

      # Alignment of message text.
      # Possible values are "left", "center" and "right".
      alignment = left

      # Show age of message if message is older than show_age_threshold
      # seconds.
      # Set to -1 to disable.
      show_age_threshold = 60

      # Split notifications into multiple lines if they don't fit into
      # geometry.
      word_wrap = yes

      # Ignore newlines '\n' in notifications.
      ignore_newline = no

      # Merge multiple notifications with the same content
      stack_duplicates = true

      # Hide the count of merged notifications with the same content
      hide_duplicate_count = false

      # Display indicators for URLs (U) and actions (A).
      show_indicators = yes

      ### Icons ###

      # Align icons left/right/off
      icon_position = left

      # Scale larger icons down to this size, set to 0 to disable
      max_icon_size = 32

      # Paths to default icons.
      icon_folders = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

      ### History ###

      # Should a notification popped up from history be sticky or timeout
      # as if it would normally do.
      sticky_history = yes

      # Maximum amount of notifications kept in history
      history_length = 20

      ### Misc/Advanced ###

      # dmenu path.
      dmenu = /usr/bin/dmenu -p dunst:

      # Browser for opening urls in context menu.
      browser = /usr/bin/google-chrome

      # Always run rule-defined scripts, even if the notification is suppressed
      always_run_script = true

      # Define the title of the windows spawned by dunst
      title = Dunst

      # Define the class of the windows spawned by dunst
      class = Dunst

      # Print a notification on startup.
      # This is mainly for error detection, since dbus (re-)starts dunst
      # automatically after a crash.
      startup_notification = false

      ### Legacy

      # Use the Xinerama extension instead of RandR for multi-monitor support.
      # This setting is provided for compatibility with older nVidia drivers that
      # do not support RandR and using it on systems that support RandR is highly
      # discouraged.
      #
      # By enabling this setting dunst will not be able to detect when a monitor
      # is connected or disconnected which might break follow mode if the screen
      # layout changes.
      force_xinerama = false

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
      # Calculate the dpi to use on a per-monitor basis.
      # If this setting is enabled the Xft.dpi value will be ignored and instead
      # dunst will attempt to calculate an appropriate dpi value for each monitor
      # using the resolution and physical size. This might be useful in setups
      # where there are multiple screens with very different dpi values.
      per_monitor_dpi = false

  [shortcuts]

      # Shortcuts are specified as [modifier+][modifier+]...key
      # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
      # "mod3" and "mod4" (windows-key).
      # Xev might be helpful to find names for keys.

      # Close notification.
      close = ctrl+space

      # Close all notifications.
      close_all = ctrl+shift+space

      # Redisplay last message(s).
      # On the US keyboard layout "grave" is normally above TAB and left
      # of "1". Make sure this key actually exists on your keyboard layout,
      # e.g. check output of 'xmodmap -pke'
      history = ctrl+grave

      # Context menu.
      context = ctrl+shift+period

  [urgency_low]
      # IMPORTANT: colors have to be defined in quotation marks.
      # Otherwise the "#" and following would be interpreted as a comment.
      background = "#282c34"
      foreground = "#dfdfdf"
      timeout = 10
      # Icon for notifications with low urgency, uncomment to enable
      #icon = /path/to/icon

  [urgency_normal]
      background = "#282c34"
      foreground = "#dfdfdf"
      timeout = 10
      # Icon for notifications with normal urgency, uncomment to enable
      #icon = /path/to/icon

  [urgency_critical]
      background = "#282c34"
      foreground = "#dfdfdf"
      frame_color = "#ff6c6b"
      timeout = 0
      # Icon for notifications with critical urgency, uncomment to enable
      #icon = /path/to/icon

  # Every section that isn't one of the above is interpreted as a rules to
  # override settings for certain messages.
  # Messages can be matched by "appname", "summary", "body", "icon", "category",
  # "msg_urgency" and you can override the "timeout", "urgency", "foreground",
  # "background", "new_icon" and "format".
  # Shell-like globbing will get expanded.
  #
  # SCRIPTING
  # You can specify a script that gets run when the rule matches by
  # setting the "script" option.
  # The script will be called as follows:
  #   script appname summary body icon urgency
  # where urgency can be "LOW", "NORMAL" or "CRITICAL".
  #
  # NOTE: if you don't want a notification to be displayed, set the format
  # to "".
  # NOTE: It might be helpful to run dunst -print in a terminal in order
  # to find fitting options for rules.

  #[espeak]
  #    summary = "*"
  #    script = dunst_espeak.sh

  #[script-test]
  #    summary = "*script*"
  #    script = dunst_test.sh

  #[ignore]
  #    # This notification will not be displayed
  #    summary = "foobar"
  #    format = ""

  #[history-ignore]
  #    # This notification will not be saved in history
  #    summary = "foobar"
  #    history_ignore = yes

  #[signed_on]
  #    appname = Pidgin
  #    summary = "*signed on*"
  #    urgency = low
  #
  #[signed_off]
  #    appname = Pidgin
  #    summary = *signed off*
  #    urgency = low
  #
  #[says]
  #    appname = Pidgin
  #    summary = *says*
  #    urgency = critical
  #
  #[twitter]
  #    appname = Pidgin
  #    summary = *twitter.com*
  #    urgency = normal
  #
  # vim: ft=cfg

#+END_SRC


* XFCE4

** Clock Format

   #+BEGIN_SRC text
     <span size='large'>📅</span> <span font_family='Roboto Light'>%A %B %d %Y</span>  <span size='large'>🕒</span> <span font_family='Roboto Medium'>%R</span>
   #+END_SRC


* cvim

** cvimrc

   #+BEGIN_SRC text
     set scalehints
     set completeonopen
     let hintcharacters="tnsedhriaobkgvfplum"

     " Linux
     let vimcommand="emacsclient"
     " Mac
     " let vimcommand="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
     " Windows
     " let vimcommand="C:\Users\anthony\emacs\bin\emacsclientw.exe"
     let vimport=9292

     let mapleader = ","
     map <Leader>v :settings<CR>
     map <Leader>n :tabnext<CR>
     map <Leader>p :tabprevious<CR>
     map n scrollDown
     map e scrollUp
     map N nextTab
     map E previousTab
     map W :tabdetatch<CR>
     map w :tabattach<space>
     map b :bookmarks!<space>
     map B :bookmarks<space>
     map T :tabnew<space>
     map t :buffer<space>
     map gb :open! chrome://bookmarks<CR>
     map ga :open! chrome://apps<CR>
     map ; openCommandBar
     imap <C-e> editWithVim

     nextSearchAndCenter -> {{
       Mappings.actions.nextSearchResult(1);
       Mappings.actions.centerMatchH(1);
     }}

     prevSearchAndCenter -> {{
       Mappings.actions.previousSearchResult(1);
       Mappings.actions.centerMatchH(1);
     }}
     map k :call nextSearchAndCenter<CR>
     map K :call prevSearchAndCenter<CR>

     setColemakVisualMappings -> {{
       Visual.movements = {
         l: ['right', 'character'],
         h: ['left', 'character'],
         e: ['left', 'line'],
         n: ['right', 'line'],
         w: ['right', 'word'],
         b: ['left', 'word'],
         0: ['left', 'lineboundary'],
         $: ['right', 'lineboundary'],
         G: ['right', 'documentboundary']
       };
     }}
     call setColemakVisualMappings

     yankLinkHref(link) -> {{
       var text = link.href;
       text = text.replace(/^(\s|\n)+|(\s|\n)+$/g,'');
       Status.setMessage(text,3);
       Clipboard.copy(text);
     }}
     yankLinkText(link) -> {{
       var text = link.text;
       text = text.replace(/^(\s|\n)+|(\s|\n)+$/g,'');
       Status.setMessage(text,3);
       Clipboard.copy(text);
     }}
     map <Leader>yh createScriptHint(yankLinkHref)
     map <Leader>yt createScriptHint(yankLinkText)

     orgmodeLink() -> {{
       var linkurl = document.location.toString();
       linkurl = linkurl.replace(/\[/g, '{');
       linkurl = linkurl.replace(/\]/g, '}');
       var linktitle = document.title;
       linktitle = linktitle.replace(/\]/g, '}');
       linktitle = linktitle.replace(/\[/g, '{');
       var link = `[[${linkurl}][${linktitle}]]`;
       Status.setMessage('Copied: ' + link,3);
       Clipboard.copy(link);
     }}
     map <Leader>lo :call orgmodeLink<CR>

     markdownLink() -> {{
       var link = `[${document.title}](${document.location.toString()})`;
       Status.setMessage('Copied: ' + link,3);
       Clipboard.copy(link)
     }}
     map <Leader>lm :call markdownLink<CR>

     org_capture -> {{
       location.href = 'org-protocol://capture?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(document.title) + '&body=' + encodeURIComponent(window.getSelection());
     }}
     org_store_link -> {{
       location.href = 'org-protocol://store-link?url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);
     }}
     map <Leader>oc :call org_capture<CR>
     map <Leader>os :call org_store_link<CR>

     css_for_docs() -> {{
       // document.addEventListener("DOMContentLoaded", function(event) {
       document.styleSheets[0].insertRule(
       ".kix-cursor-caret {\
         display: block !important;\
         border-color: #4285F4 !important;\
         box-shadow: 0 0 0px #4285F4, 0 0 15px #3367D6, 0 0 50px #7BAAF7 !important; \
       }",0);
       document.styleSheets[0].insertRule(
       ".kix-selection-overlay { \
         display: block !important; \
         box-shadow: 0 0 0px #4285F4, 0 0 15px #3367D6, 0 0 50px #7BAAF7 !important; \
       }",0);
       // });
     }}

     site '*://docs.google.com/*' {
       call css_for_docs
       unmapAll
       iunmapAll
       map f createHint
       map b :bookmarks!<space>
       map B :bookmarks<space>
       map T :tabnew<space>
       map t :buffer<space>
       map : openCommandBar
       map ; openCommandBar
       map H goBack
       map L goForward
       map o :open<space>
       imap <C-e> editWithVim
       map <Leader>oc :call org_capture<CR>
       map <Leader>os :call org_store_link<CR>
     }

     css_for_bugs() -> {{
       document.styleSheets[0].insertRule(".codefont {font-family: PragmataPro, monospace !important;font-size: 1.2em !important;}",0);
     }}
     site '*://bugs1/*' {
       call css_for_bugs
     }
     site '*://bugs2/*' {
       call css_for_bugs
     }

     css_for_scripts() -> {{
       document.styleSheets[0].insertRule("pre, .CodeMirror {font-family: PragmataPro, monospace !important;}",0);
     }}
     site '*://example.com/*' {
       call css_for_scripts
     }

     css_for_youtube() -> {{
       document.styleSheets[0].insertRule(".watch-sidebar-body { display: none; }",0);
       document.styleSheets[0].insertRule(".ytp-endscreen-content {display: none;}",0);
       document.styleSheets[0].insertRule(".comment-section-renderer-items {display: none;}",0);
     }}
     site '*://www.youtube.com/*' {
       call css_for_youtube
     }

     css_for_gmail() -> {{
       document.styleSheets[0].insertRule(".Bu:nth-child(2), .Bu:nth-child(3) { display: none !important; }",0);
       document.styleSheets[0].insertRule(".nK { margin-top: 16px !important; }",0);
     }}
     site '*://mail.google.com/*' {
       call css_for_gmail
       unmapAll
       iunmapAll
       map f createHint
       map b :bookmarks!<space>
       map B :bookmarks<space>
       map T :tabnew<space>
       map t :buffer<space>
       map : openCommandBar
       map ; openCommandBar
       map H goBack
       map L goForward
       map o :open<space>
       imap <C-e> editWithVim
       map <Leader>oc :call org_capture<CR>
       map <Leader>os :call org_store_link<CR>
     }

     site '*://dashboards*' {
       unmapAll
       iunmapAll
     }
   #+END_SRC

** css

   #+BEGIN_SRC css
     #cVim-command-bar, #cVim-command-bar-mode, #cVim-command-bar-input, #cVim-command-bar-search-results,
     .cVim-completion-item, .cVim-completion-item .cVim-full, .cVim-completion-item .cVim-left,
     .cVim-completion-item .cVim-right {
       font-family: "PragmataPro", monospace;
       font-size: 10pt !important;
       -webkit-font-smoothing: antialiased !important;
     }

     #cVim-command-bar {
       position: fixed;
       z-index: 2147483646;
       background-color: #515151;
       color: #d3d0c8;
       display: none;
       box-sizing: content-box;
       box-shadow: 0 3px 3px rgba(0,0,0,0.4);
       left: 0;
       width: 100%;
       height: 20px;
     }

     #cVim-command-bar-mode {
       display: inline-block;
       vertical-align: middle;
       box-sizing: border-box;
       padding-left: 2px;
       height: 100%;
       width: 10px;
       padding-top: 2px;
       color: #888;
     }

     #cVim-command-bar-input {
       background-color: #2d2d2d;
       color: #bbb;
       height: 100%;
       right: 0;
       top: 0;
       width: calc(100% - 10px);
       position: absolute;
     }

     #cVim-command-bar-search-results {
       position: fixed;
       width: 100%;
       overflow: hidden;
       z-index: 2147483647;
       left: 0;
       box-shadow: 0 3px 3px rgba(0,0,0,0.4);
       background-color: #1c1c1c;
     }

     .cVim-completion-item, .cVim-completion-item .cVim-full, .cVim-completion-item .cVim-left, .cVim-completion-item .cVim-right {
       text-overflow: ellipsis;
       padding: 1px;
       display: inline-block;
       box-sizing: border-box;
       vertical-align: middle;
       overflow: hidden;
       white-space: nowrap;
     }

     .cVim-completion-item:nth-child(even) {
       background-color: #1f1f1f;
     }

     .cVim-completion-item {
       width: 100%; left: 0;
       color: #d3d0c8;
     }

     .cVim-completion-item[active] {
       width: 100%; left: 0;
       color: #f2f0ec;
       background-color: #515151;
     }

     .cVim-completion-item[active] span {
       color: #ffcc66;
     }

     .cVim-completion-item .cVim-left {
       color: #6699cc;
       width: 37%;
     }

     .cVim-completion-item .cVim-right {
       font-style: italic;
       color: #cc99cc;
       width: 57%;
     }


     #cVim-link-container, .cVim-link-hint,
     #cVim-hud, #cVim-status-bar {
       font-family: "Roboto", Helvetica, Helvetica Neue, Neue, sans-serif, monospace, Arial;
       font-weight: bold;
       font-size: 14pt !important;
       -webkit-font-smoothing: antialiased !important;
     }

     #cVim-link-container {
       position: absolute;
       pointer-events: none;
       width: 100%; left: 0;
       height: 100%; top: 0;
       z-index: 2147483647;
     }

     .cVim-link-hint {
       position: absolute;
       color: #302505 !important;
       background-color: #ffd76e !important;
       border-radius: 2px !important;
       padding: 2px !important;
       font-family: "Roboto", Helvetica, Helvetica Neue, Neue, sans-serif, monospace, Arial;
       font-size: 10pt !important;
       font-weight: 500 !important;
       text-transform: uppercase !important;
       border: 1px solid #ad810c;
       display: inline-block !important;
       vertical-align: middle !important;
       text-align: center !important;
       box-shadow: 2px 2px 1px rgba(0,0,0,0.25) !important;
     }

     .cVim-link-hint_match {
       color: #777;
       text-transform: uppercase !important;
     }


     #cVim-hud {
       background-color: rgba(28,28,28,0.9);
       position: fixed !important;
       transition: right 0.2s ease-out;
       z-index: 24724289;
     }

     #cVim-hud span {
       padding: 2px;
       padding-left: 4px;
       padding-right: 4px;
       color: #8f8f8f;
       font-size: 10pt;
     }

     #cVim-frames-outline {
       position: fixed;
       width: 100%;
       height: 100%;
       left: 0;
       top: 0;
       right: 0;
       z-index: 9999999999;
       box-sizing: border-box;
       border: 3px solid yellow;
     }
   #+END_SRC
