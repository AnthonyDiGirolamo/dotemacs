#+STARTUP: showall
#+PROPERTY: header-args :tangle (if amd/settings-file amd/settings-file "no")

* Table of Contents                                                     :TOC:
 - [[#amdvariables][amd/variables]]
 - [[#path][path]]
 - [[#general-settings][general settings]]
 - [[#fonts][fonts]]
 - [[#libraries][libraries]]
 - [[#appearance][appearance]]
   - [[#themes][themes]]
   - [[#modeline][modeline]]
   - [[#load-theme][load theme]]
   - [[#appearance-minor-modes][appearance minor-modes]]
 - [[#amdfunctions][amd/functions]]
 - [[#evil-mode][evil-mode]]
 - [[#packages-built-in][packages (built-in)]]
   - [[#recent-files-mode][Recent Files mode]]
   - [[#re-builder][re-builder]]
   - [[#saveplace---save-last-position-in-a-file][saveplace - save last position in a file]]
   - [[#savehist---save-minibuffer-history][savehist - save minibuffer history]]
   - [[#desktop---save-buffers-windows-and-eyebrowse-tabs-between-sessions][desktop - save buffers, windows, and eyebrowse (tabs) between sessions]]
   - [[#dired][dired]]
   - [[#eshell][eshell]]
   - [[#shell][shell]]
   - [[#compilation][compilation]]
   - [[#calc][calc]]
   - [[#winner---window-layout-undoredo][winner - window layout undo/redo]]
   - [[#eww][eww]]
 - [[#company-auto-completion][company auto-completion]]
   - [[#deprecated---auto-complete][deprecated - auto-complete]]
 - [[#key-discovery][key discovery]]
 - [[#snippets][snippets]]
 - [[#grep][grep]]
 - [[#magit---version-control][magit - version-control]]
 - [[#spell-checking][spell checking]]
 - [[#navigation][navigation]]
   - [[#ido-ido-vertical-flx-ido][ido, ido-vertical, flx-ido]]
   - [[#avy][avy]]
   - [[#undo-tree][undo-tree]]
   - [[#eyebrowse---tabs][eyebrowse - tabs]]
   - [[#ace-window][ace-window]]
   - [[#ace-link][ace-link]]
   - [[#projectile][projectile]]
   - [[#shackle][shackle]]
   - [[#ibuffer][ibuffer]]
   - [[#tmux-window-navigation][tmux-window-navigation]]
   - [[#which-func][which-func]]
   - [[#deprecated][deprecated]]
 - [[#email][email]]
 - [[#language-major-modes][language major-modes]]
 - [[#hydra][hydra]]
 - [[#hydra-leader-menus][hydra leader menus]]
   - [[#main-leader-hydra][Main Leader Hydra]]
   - [[#major-mode-leader-hydra-function][Major Mode Leader Hydra Function]]
   - [[#org-hydra][Org Hydra]]
   - [[#emacs-lisp-hydra][Emacs-Lisp Hydra]]
 - [[#ivy-swiper-and-counsel][ivy, swiper, and counsel]]
   - [[#deprecated-functions][deprecated functions]]
 - [[#fun][fun]]
 - [[#org][org]]
   - [[#help-docs][Help docs]]
   - [[#use-package-org][use-package org]]
   - [[#org-capture][org-capture]]
   - [[#kanbanel][kanban.el]]
   - [[#toc-org][toc-org]]
   - [[#org-protocol][org-protocol]]
 - [[#elisp-links][elisp links]]
 - [[#outorg--outshine][outorg & outshine]]
 - [[#edit-with-emacs-and-cvim][edit-with-emacs and cvim]]
 - [[#neotree][neotree]]
 - [[#view-large-files][view large files]]
 - [[#emacs-and-git-on-windows][emacs and git on windows]]
 - [[#tramp][tramp]]

* amd/variables

  #+BEGIN_SRC emacs-lisp
    (setq amd/leader-key ",")
    (setq amd/leader-key-insert "C-,")
    (when amd/using-pocketchip
      (setq amd/leader-key "SPC"))
  #+END_SRC

* path

  #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
  #+END_SRC

* general settings

  #+BEGIN_SRC emacs-lisp
    (require 'mouse)
    (xterm-mouse-mode t)

    (setq inhibit-startup-screen t)
    (setq echo-keystrokes 0.2)

    (setq ring-bell-function (lambda ()))
    (setq recenter-redisplay nil) ;; don't redraw the whole display when recentering

    (setq-default fill-column 80)
    ;; (add-hook 'text-mode-hook 'turn-on-auto-fill) ;; get auto line breaks at fill-column - auto-fill-mode
    (set-display-table-slot standard-display-table 'wrap ?\ ) ;; Hide the \ at the end of each wrapped line. Don't reall need it with relative-line-numbers
    ;; toggle-truncate-lines will toggle line wrapping
    ;; auto-fill-mode will insert line breaks automatically

    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    ;; (unless (display-graphic-p)
      (menu-bar-mode -1)
    ;; )

    ;; Save Tempfiles in a temp dir
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

    ;; Stop making backup files
    (setq make-backup-files nil)

    (defalias 'yes-or-no-p 'y-or-n-p) ;; no more typing out y.e.s.

    ;; (set-default 'show-trailing-whitespace t)
    (setq delete-trailing-lines nil)
    (add-hook 'before-save-hook 'delete-trailing-whitespace) ;; Erase trailing whitespace before save

    ;; Indentation
    (setq-default c-basic-indent 2)
    (setq-default tab-width 2)          ;; set tw=2
    (setq-default indent-tabs-mode nil) ;; set expandtab

    ;; Scroll just one line when hitting bottom of window
    ;; (setq scroll-step 1)
    (setq scroll-conservatively 10000)

    ;; Mac OSX Emacs Settings
    (setq ns-alternate-modifier 'meta
          ns-command-modifier 'meta)
  #+END_SRC

* fonts

  #+BEGIN_SRC emacs-lisp
    (cond ((or (eq system-type 'cygwin) (eq system-type 'windows-nt))
           (progn (setq amd/font-size 19)
                  (add-to-list 'default-frame-alist '(font . "PragmataPro-19" ))))
          (amd/using-pocketchip
           (progn (setq amd/font-size 12)
                  (add-to-list 'default-frame-alist '(font . "-xos4-Terminus-normal-normal-normal-*-12-*-*-*-c-60-iso10646-1" ))))
          ((eq system-type 'gnu/linux)
           (progn (setq amd/font-size 17)
                  (add-to-list 'default-frame-alist '(font . "PragmataPro-17" ))))
          (t
           (progn (setq amd/font-size 18)
                  (add-to-list 'default-frame-alist '(font . "PragmataPro-18" )))))

    ;; UTF8 Setup
    (set-language-environment 'utf-8)
    (setq locale-coding-system 'utf-8)

    ;; set the default encoding system
    (prefer-coding-system 'utf-8)
    (setq default-file-name-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    ;; backwards compatibility as default-buffer-file-coding-system
    ;; is deprecated in 23.2.
    (if (boundp buffer-file-coding-system)
        (setq buffer-file-coding-system 'utf-8)
      (setq default-buffer-file-coding-system 'utf-8))

    ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

    (when (display-graphic-p)
      (setq prettify-symbols-unprettify-at-point t)
      (setq
       prettify-symbols-alist
       '(("->"  . (?\s (Br . Bl) ?))
         ("-->" . (?\s (Br . Bl) ?\s (Br . Bl) ?))
         ("==>" . (?\s (Br . Bl) ?\s (Br . Bl) ?))
         ("=>" . (?\s (Br . Bl) ?))
         ("--" . (?\s (Br . Bl) ?))
         ("!=" . (?\s (Br . Bl) ?))
         ("==" . (?\s (Br . Bl) ?))
         (">=" . (?\s (Br . Bl) ?))
         ("<=" . (?\s (Br . Bl) ?))
         ("~=" . (?\s (Br . Bl) ?))
         ("&&" . (?\s (Br . Bl) ?))
         ("#{" . (?\s (Br . Bl) ?))
         ("lambda" . ?ƛ)
         ("ERROR"  . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?))
         ("DEBUG"  . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?))))
      (global-prettify-symbols-mode 1))

  #+END_SRC

* libraries

  #+BEGIN_SRC emacs-lisp
    (use-package general)

    (use-package s)

    (use-package dash)

    (use-package subr-x) ;; needed for string-trim
  #+END_SRC

* appearance

** themes

*** light theme

   #+BEGIN_SRC emacs-lisp
     (defun amd/light-theme ()
       "Light background theme"
       (interactive)
       (load-theme 'leuven t)
       (load-theme 'airline-light t)
       (custom-theme-set-faces 'leuven
        ;; 100% blue faces
        ;; `(comint-highlight-input ((t (:foreground "#ff4500"))))
        ;; `(comint-highlight-prompt ((t (:foreground "#ff4500"))))
        ;; `(company-tooltip-annotation ((t (:foreground "#ff4500"))))
        ;; `(dired-directory ((t (:foreground "#ff4500" :background "#ffffd2" :weight bold))))
        ;; `(dired-header ((t (:foreground "#ff4500" :background "#ffffd2" :weight bold))))
        ;; `(font-lock-keyword-face ((t (:foreground "#ff4500"))))
        ;; `(hydra-face-blue ((t (:foreground "#ff4500" :weight bold))))

        ;; '(info-node ((t (:foreground "#ff4500" :underline t))))
        ;; `(ivy-subdir ((t (:foreground "#ff4500" :background "#ffffd2" :weight bold))))
        ;; `(makey-key-mode-header-face ((t (:foreground "#ff4500"))))
        ;; `(org-priority ((t (:foreground "#ff4500"))))
        ;; `(wgrep-done-face ((t (:foreground "#ff4500"))))
        ;; `(web-mode-keyword-face ((t (:foreground "#ff4500"))))
        ;; `(web-mode-css-selector-face ((t (:foreground "#ff4500"))))
        ;; `(which-key-group-description-face ((t (:foreground "#ff4500"))))

        `(rainbow-delimiters-depth-1-face ((t (:foreground "#aa88ff" :weight bold))))
        `(rainbow-delimiters-depth-2-face ((t (:foreground "#88aaff" :weight bold))))
        `(rainbow-delimiters-depth-3-face ((t (:foreground "#88ffff" :weight bold))))
        `(rainbow-delimiters-depth-4-face ((t (:foreground "#66ffaa" :weight bold))))
        `(rainbow-delimiters-depth-5-face ((t (:foreground "#ffff66" :weight bold))))
        `(rainbow-delimiters-depth-6-face ((t (:foreground "#ffaa00" :weight bold))))
        `(rainbow-delimiters-depth-7-face ((t (:foreground "#ff6666" :weight bold))))
        `(rainbow-delimiters-depth-8-face ((t (:foreground "#ff66aa" :weight bold))))

        `(avy-lead-face ((t (:foreground "#ffaf00"))))
        `(avy-lead-face-0 ((t (:foreground "#5fd7ff"))))
        `(avy-background-face ((t (:background "#eeeeee" :foreground "#a2a2a2"))))

        ;; lavender experiment
        ;; ;; `(default ((t (:foreground "#333333" :background "#F5F5F5"))))
        ;; `(default ((t (:foreground "#E0CEED" :background "#29222E"))))
        ;; `(org-block ((t (:foreground "#776385" :background "#160e1b"))))
        ;; `(org-block-begin-line ((t (:foreground "#E0CEED" :background "#3A2F42"))))
        ;; `(org-block-end-line   ((t (:foreground "#E0CEED" :background "#3A2F42"))))
        ;; `(font-lock-keyword-face ((t (:foreground "#A29DFA"))))
        ;; `(font-lock-comment-face           ((t (:foreground "#776385" :background "#160e1b"))))
        ;; `(fringe ((t (:foreground "#776385" :background "#160e1b"))))
        )
       )
   #+END_SRC

*** dark theme

   #+BEGIN_SRC emacs-lisp
     (defun amd/dark-theme ()
       "dark background theme"
       (interactive)
       (load-theme 'moe-dark t)
       (load-theme 'airline-behelit t)
       (custom-theme-set-faces 'moe-dark
        ;; `(default ((t (:background "#000000"))))
        `(region ((t (:background "#626262"))))

        ;; No Terminal Italics (which is sometimes reverse video)
        ;; see: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/2347
        `(font-lock-comment-delimiter-face ((t (:slant normal :foreground "#6c6c6c"))))
        `(font-lock-comment-face           ((t (:slant normal :foreground "#6c6c6c"))))

        `(org-document-title
                      ((t (:height 1.0 :weight normal :slant normal :foreground "#aa88ff" :underline nil)))) ;; purple
        ;; `(org-level-1 ((t (:height 1.0 :weight normal :slant normal :foreground "#aa88ff" :underline nil)))) ;; purple
        ;; `(org-level-2 ((t (:height 1.0 :weight normal :slant normal :foreground "#88aaff" :underline nil)))) ;; blue
        `(org-level-1 ((t (:height 1.3 :weight bold   :slant normal :foreground "#aa88ff" :background "#3a3a3a" :underline nil :box (:line-width 4 :color "#3a3a3a" :style nil)))))
        `(org-level-2 ((t (:height 1.1 :weight bold   :slant normal :foreground "#88aaff" :background "#3a3a3a" :underline nil :box (:line-width 4 :color "#3a3a3a" :style nil)))))
        `(org-level-3 ((t (:height 1.0 :weight normal :slant normal :foreground "#88ffff" :underline nil)))) ;; cyan
        `(org-level-4 ((t (:height 1.0 :weight normal :slant normal :foreground "#66ffaa" :underline nil)))) ;; sea-green
        `(org-level-5 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffff66" :underline nil)))) ;; yellow
        `(org-level-6 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffaa00" :underline nil)))) ;; orange
        `(org-level-7 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff6666" :underline nil)))) ;; red
        `(org-level-8 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff66aa" :underline nil)))) ;; pink

        `(outshine-level-1 ((t (:height 1.0 :weight normal :slant normal :foreground "#aa88ff" :underline nil)))) ;; purple
        `(outshine-level-2 ((t (:height 1.0 :weight normal :slant normal :foreground "#88aaff" :underline nil)))) ;; blue
        `(outshine-level-3 ((t (:height 1.0 :weight normal :slant normal :foreground "#88ffff" :underline nil)))) ;; cyan
        `(outshine-level-4 ((t (:height 1.0 :weight normal :slant normal :foreground "#66ffaa" :underline nil)))) ;; sea-green
        `(outshine-level-5 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffff66" :underline nil)))) ;; yellow
        `(outshine-level-6 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffaa00" :underline nil)))) ;; orange
        `(outshine-level-7 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff6666" :underline nil)))) ;; red
        `(outshine-level-8 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff66aa" :underline nil)))) ;; pink

        `(rainbow-delimiters-depth-1-face ((t (:foreground "#aa88ff" :weight bold))))
        `(rainbow-delimiters-depth-2-face ((t (:foreground "#88aaff" :weight bold))))
        `(rainbow-delimiters-depth-3-face ((t (:foreground "#88ffff" :weight bold))))
        `(rainbow-delimiters-depth-4-face ((t (:foreground "#66ffaa" :weight bold))))
        `(rainbow-delimiters-depth-5-face ((t (:foreground "#ffff66" :weight bold))))
        `(rainbow-delimiters-depth-6-face ((t (:foreground "#ffaa00" :weight bold))))
        `(rainbow-delimiters-depth-7-face ((t (:foreground "#ff6666" :weight bold))))
        `(rainbow-delimiters-depth-8-face ((t (:foreground "#ff66aa" :weight bold))))

        `(ace-jump-face-foreground ((t (:background "color-18" :foreground "#ff8700" :weight bold))))

        `(avy-lead-face ((t (:foreground "#ffaf00"))))
        `(avy-lead-face-0 ((t (:foreground "#5fd7ff"))))

        `(eyebrowse-mode-line-active ((t (:inherit mode-line-emphasis :foreground "#ffff87"))))

        `(flycheck-error ((t (:inherit default :background "color-236" :foreground "#ff5f87" :underline t :weight bold))))

        '(flyspell-duplicate ((t (:underline "yellow" :weight bold))))
        '(flyspell-incorrect ((t (:underline "yellow" :weight bold))))

        ;; (if (display-graphic-p)
            `(org-todo ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "#ff00ff" ))))
          ;; `(org-todo ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "color-201" )))))

        ;; (if (display-graphic-p)
            `(org-done ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "#00ffff"))))
          ;; `(org-done ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "color-51")))))

        `(org-link ((t (:foreground "#87d7ff" :underline t))))

        `(org-block-begin-line ((t (:foreground "#5a5a5a" :background "#2e2e2e"))))
        `(org-block-end-line ((t (:foreground nil :background nil :inherit 'org-block-begin-line))))
        `(org-block ((t (:foreground nil :background nil :inherit nil))))

        `(dired-subtree-depth-1-face ((t (:background "#3a3a3a"))))
        `(dired-subtree-depth-2-face ((t (:background "#444444"))))
        `(dired-subtree-depth-3-face ((t (:background "#4e4e4e"))))
        `(dired-subtree-depth-4-face ((t (:background "#585858"))))
        `(dired-subtree-depth-5-face ((t (:background "#626262"))))
        `(dired-subtree-depth-6-face ((t (:background "#6c6c6c"))))

        ;; :overline "#A7A7A7" :foreground "#3C3C3C" :background "#F0F0F0"
        ;; :overline "#123555" :foreground "#123555" :background "#E5F4FB"
        ;; :foreground "#005522" :background "#EFFFEF"
        ;; :foreground "#EA6300"
        ;; :foreground "#E3258D"
        ;; :foreground "#0077CC"
        ;; :foreground "#2EAE2C"
        ;; :foreground "#FD8008"

        `(ediff-current-diff-A ((t (:foreground "gray33" :background "#FFDDDD"))))
        `(ediff-current-diff-B ((t (:foreground "gray33" :background "#DDFFDD"))))
        `(ediff-current-diff-C ((t (:foreground "black" :background "#00afff"))))

        `(ediff-even-diff-A ((t (:background "#4e4e4e"))))
        `(ediff-even-diff-B ((t (:background "#4e4e4e"))))
        `(ediff-even-diff-C ((t (:background "#4e4e4e"))))

        `(ediff-fine-diff-A ((t (:foreground "#af0000" :background "#FFAAAA"))))
        `(ediff-fine-diff-B ((t (:foreground "#008000" :background "#55FF55"))))

        `(ediff-fine-diff-C ((t (:foreground "black" :background "#ffff5f"))))
        `(ediff-odd-diff-A ((t (:background "#4e4e4e"))))
        `(ediff-odd-diff-B ((t (:background "#4e4e4e"))))
        `(ediff-odd-diff-C ((t (:background "#4e4e4e"))))
        `(ediff-odd-diff-Ancestor ((t (:background "#4e4e4e"))))

        `(mu4e-unread-face ((t (:weight normal :slant normal :foreground "#66ffaa" :underline nil)))) ;; purple

        `(mu4e-contact-face ((t (:weight normal :slant normal :foreground "#88aaff" :underline nil)))) ;; purple
        `(mu4e-header-value-face ((t (:weight normal :slant normal :foreground "#66ffaa" :underline nil)))) ;; purple
        `(mu4e-special-header-value-face ((t (:weight normal :slant normal :foreground "#66ffaa" :underline nil)))) ;; purple

        ;; `(header-line ((t (:weight normal :slant normal :foreground "#FFFFFF" :background "#4e4e4e" :underline nil))))
        `(header-line ((t (:weight normal :slant normal :foreground "#6c6c6c" :background "#3a3a3a"))))

        `(hl-line ((t (:background "#3a3a3a"))))
        `(vline ((t (:background "#3a3a3a"))))

        `(secondary-selection ((t (:weight normal :slant normal :foreground "#FFFFFF" :background "#5f87ff" :underline nil))))
        `(magit-diff-file-heading-highlight ((t (:weight normal :slant normal :foreground "#FFFFFF" :background "#5f87ff" :underline nil))))
        `(magit-section-highlight ((t (:weight bold :slant normal))))

        `(evil-ex-lazy-highlight ((t (:foreground "#FFFFFF" :background "#5f87ff"))))

        ;; ;; ivy-mode
        ;; `(ivy-current-match ((,class (:foreground ,orange-2 :bold t :inherit highlight))))
        `(ivy-current-match ((t (:inherit highlight))))
        ;; `(ivy-confirm-face ((,class (:foreground ,green-4 :background ,green-00 :bold t))))
        ;; `(ivy-subdir ((,class (:foreground ,blue-1 :bold t))))
        ;; `(ivy-virtual ((,class (:foreground ,magenta-3))))

        ;; `(ivy-minibuffer-match-face-1 ((,class (:background ,blue-1 :foreground ,white-0))))
        ;; `(ivy-minibuffer-match-face-2 ((,class (:bold t :background ,green-2 :foreground ,white-0))))
        ;; `(ivy-minibuffer-match-face-3 ((,class (:bold t :background ,magenta-2 :foreground ,white-0))))
        ;; `(ivy-minibuffer-match-face-4 ((,class (:bold t :background ,cyan-3 :foreground ,white-0))))

        ;; ;; swiper
        ;; `(swiper-match-face-1 ((t (:inherit isearch-lazy-highlight-face))))
        ;; `(swiper-match-face-2 ((t (:inherit isearch))))
        ;; `(swiper-match-face-3 ((t (:inherit match))))
        ;; `(swiper-match-face-4 ((t (:inherit isearch-fail))))
        `(swiper-line-face    ((t (:inherit highlight))))
        `(minibuffer-prompt ((t (:foreground nil :background nil :inherit 'wgrep-reject-face))))
        `(dired-header    ((t (:inherit minibuffer-prompt))))

       )
     )
   #+END_SRC

*** doom-themes

   #+BEGIN_SRC emacs-lisp
     (use-package soliare
       :init
       ;; brighten buffers (that represent real files)
       (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
       ;; ...if you use auto-revert-mode:
       (add-hook 'after-revert-hook #'turn-on-solaire-mode)
       ;; You can do similar with the minibuffer when it is activated:
       ;; (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
       ;; To enable solaire-mode unconditionally for certain modes:
       ;; (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)
       (add-hook 'eshell-mode-hook #'solaire-mode)
     )

     (use-package doom-themes
       :config
       (defun amd/doom-one-theme ()
         "load doom-theme and override some colors"
         (interactive)

         ;; nice large modeline
         (setq powerline-default-separator nil
               powerline-height (* amd/font-size 1.75))

         (let ((doom-theme-name
                 'doom-one
                 ;; 'doom-molokai
                 ;; (if (display-graphic-p) 'doom-one 'doom-molokai )
               ))
           (load-theme doom-theme-name t)
           (load-theme 'airline-doom-one t)

           (custom-theme-set-faces
            'airline-doom-one
            `(minibuffer-prompt ((t (:foreground nil :background nil :inherit 'wgrep-reject-face))))
            )

           (custom-theme-set-faces
            doom-theme-name
            '(flyspell-duplicate ((t (:underline "yellow" :weight bold))))
            '(flyspell-incorrect ((t (:underline "yellow" :weight bold))))
            `(rainbow-delimiters-depth-1-face ((t (:foreground "#aa88ff" :weight bold))))
            `(rainbow-delimiters-depth-2-face ((t (:foreground "#88aaff" :weight bold))))
            `(rainbow-delimiters-depth-3-face ((t (:foreground "#88ffff" :weight bold))))
            `(rainbow-delimiters-depth-4-face ((t (:foreground "#66ffaa" :weight bold))))
            `(rainbow-delimiters-depth-5-face ((t (:foreground "#ffff66" :weight bold))))
            `(rainbow-delimiters-depth-6-face ((t (:foreground "#ffaa00" :weight bold))))
            `(rainbow-delimiters-depth-7-face ((t (:foreground "#ff6666" :weight bold))))
            `(rainbow-delimiters-depth-8-face ((t (:foreground "#ff66aa" :weight bold))))

            ;; `(org-level-1 ((t (:height 1.3 :weight bold   :slant normal :foreground "#00B3EF" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))))
            ;; `(org-level-2 ((t (:height 1.1 :weight bold   :slant normal :foreground "#40D3FF" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))))
            `(org-level-1 ((t (:height 1.3 :weight bold   :slant normal :foreground "#aa88ff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))))
            `(org-level-2 ((t (:height 1.1 :weight bold   :slant normal :foreground "#88aaff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))))
            `(org-level-3 ((t (:height 1.0 :weight normal :slant normal :foreground "#88ffff" :underline nil)))) ;; cyan
            `(org-level-4 ((t (:height 1.0 :weight normal :slant normal :foreground "#66ffaa" :underline nil)))) ;; sea-green
            `(org-level-5 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffff66" :underline nil)))) ;; yellow
            `(org-level-6 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffaa00" :underline nil)))) ;; orange
            `(org-level-7 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff6666" :underline nil)))) ;; red
            `(org-level-8 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff66aa" :underline nil)))) ;; pink
            ;; `(org-block ((t (:foreground nil :background nil :inherit 'org-block-begin-line))))

            `(ace-jump-face-foreground ((t (:background "color-18" :foreground "#ff8700" :weight bold))))
            `(avy-lead-face ((t (:foreground "#ffaf00"))))
            `(avy-lead-face-0 ((t (:foreground "#5fd7ff"))))
            `(avy-lead-face-1 ((t (:foreground "#66ffaa"))))
            `(avy-lead-face-2 ((t (:foreground "#ff6666"))))

            `(eyebrowse-mode-line-active ((t (:foreground "#ECBE7B" :weight bold))))
            `(flyspell-duplicate ((t (:underline "yellow" :weight bold))))
            `(flyspell-incorrect ((t (:underline "yellow" :weight bold))))
            ;; `(secondary-selection ((t (:foreground "#51afef" :background "#181e26"))))
            )
         )
       )
     )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes-neotree
       :after neotree
       :config
       (setq doom-neotree-enable-folder-icons t)
       (setq doom-neotree-enable-file-icons 'simple))
   #+END_SRC

** modeline

   #+BEGIN_SRC emacs-lisp
     (use-package powerline
       :init
       (setq powerline-utf-8-separator-left  #xe0b0
             powerline-utf-8-separator-right #xe0b2)
       (setq powerline-default-separator 'utf-8)
       (when amd/font-size
         (setq powerline-height (floor (* amd/font-size 1.2))))
     )

     (use-package airline-themes
       :load-path "airline-themes"
       :init
       ;; (setq airline-display-directory 'airline-directory-shortened)
       (setq airline-display-directory nil)
       (setq airline-shortened-directory-length 16)
       (setq airline-utf-glyph-separator-left      #xe0b0
             airline-utf-glyph-separator-right     #xe0b2
             airline-utf-glyph-subseparator-left   #xe0b1
             airline-utf-glyph-subseparator-right  #xe0b3
             airline-utf-glyph-branch              #xe0a0
             airline-utf-glyph-readonly            #xe0a2
             airline-utf-glyph-linenumber          #xe0a1)
     )
   #+END_SRC

** load theme

    #+BEGIN_SRC emacs-lisp
      (use-package moe-theme)
      ;; (amd/light-theme)
      ;; (amd/dark-theme)
      ;; (load-theme 'kaolin t)
      ;; (load-theme 'rebecca t)
      ;; (load-theme 'spacemacs-dark t)
      ;; (load-theme 'airline-doom-one t)
      (amd/doom-one-theme)
    #+END_SRC

** appearance minor-modes

   Setup a list of major-modes to load appearance minor-modes. ~eval-and-compile~
   is used so the list is accessible inside use-package definitions.

   #+BEGIN_SRC emacs-lisp
     (eval-and-compile
       (setq amd/appearance-mode-hooks
             '(ruby-mode-hook
               c-mode-common-hook
               c++-mode-hook
               python-mode-hook
               lua-mode-hook
               emacs-lisp-mode-hook
               latex-mode-hook
               js2-mode-hook
               ;; nxml-mode-hook
               ;; sql-mode-hook
               sh-mode-hook)))

     (defun amd/add-appearance-mode (mode-to-add)
       (interactive)
       (cl-loop for this-mode in amd/appearance-mode-hooks
          collect (add-hook this-mode mode-to-add)))
   #+END_SRC

*** hl-line

    Highlight the current line using the built-in ~hl-line-mode~.

   #+BEGIN_SRC emacs-lisp
     (use-package hl-line
       :config
       (add-hook 'hl-line-mode 'org-mode)
       (amd/add-appearance-mode 'hl-line-mode))
   #+END_SRC

*** fill-column-indicator

    #+BEGIN_SRC emacs-lisp
      (use-package fill-column-indicator
        :init
        (amd/add-appearance-mode 'fci-mode))
    #+END_SRC

*** nlinum-relative

    Relative line numbering using ~nlinum~ which is faster than the built-in
    ~linum~ mode.

   #+BEGIN_SRC emacs-lisp
     (use-package nlinum-relative
       :init
       ;; (setq nlinum-relative-redisplay-delay 0)   ;; delay
       ;; (setq nlinum-relative-current-symbol "->") ;; or "" for display current line number
       ;; (setq nlinum-relative-offset 0)            ;; 1 if you want 0, 2, 3...
       :config
       (nlinum-relative-setup-evil)
       (unless (or amd/using-pocketchip amd/using-android)
         (amd/add-appearance-mode 'nlinum-relative-mode)))
   #+END_SRC

**** deprecated

***** relative-line-numbers

      No longer using ~relative-line-numbers~, ~nlinum-relative~ has better performance.

      #+BEGIN_SRC emacs-lisp :tangle no
        ;; (use-package relative-line-numbers
        ;;   :diminish ""
        ;;   :config
        ;;   (--map (add-hook it 'relative-line-numbers-mode) amd/appearance-mode-hooks)
        ;;   (defun abs-rel-numbers (offset)
        ;;     (if (= offset 0)
        ;;         ;; current line
        ;;         (format "%4d " (line-number-at-pos))
        ;;       ;; not the current line
        ;;       (format "%4d " (abs offset))
        ;;     )
        ;;   )
        ;;   (setq relative-line-numbers-format #'abs-rel-numbers)
        ;; )
      #+END_SRC

***** sublimity

      #+BEGIN_SRC emacs-lisp
        ;; (use-package sublimity-map
        ;;   :init
        ;;   (setq sublimity-map-size 20)
        ;;   (setq sublimity-map-fraction 0.3)
        ;;   (setq sublimity-map-text-scale -7)
        ;;   :config
        ;;   (sublimity-mode 1)
        ;;   ;; (sublimity-map-set-delay 0)
        ;; )
      #+END_SRC

*** color-identifiers

    This mode gives variables names unique colors.

   #+BEGIN_SRC emacs-lisp
     (use-package color-identifiers-mode ;; the package is actually called "color-identifiers-mode" with -mode at the end
       :commands (color-identifiers-mode)
       :diminish color-identifiers-mode
       :init
       (amd/add-appearance-mode 'color-identifiers-mode)
       :config
       (setq color-identifiers:num-colors 16)
       ;; (add-to-list
       ;;  'color-identifiers:modes-alist
       ;;  `(lua-mode . ("[^.][[:space:]]*"
       ;;                "\\_<\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)"
       ;;                (nil font-lock-variable-name-face))))
     )
   #+END_SRC

*** rainbow-identifiers

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package rainbow-identifiers
       :commands (rainbow-identifiers-mode)
       :init
       (setq rainbow-identifiers-cie-l*a*b*-lightness 50
             rainbow-identifiers-cie-l*a*b*-saturation 30)
       ;; rainbow-identifiers-face-count 30
       (amd/add-appearance-mode 'rainbow-identifiers-mode)
     )
   #+END_SRC

*** rainbow-delimiters

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :init
       (amd/add-appearance-mode 'rainbow-delimiters-mode))
   #+END_SRC

* amd/functions

  #+BEGIN_SRC emacs-lisp
    (defun amd/copy-buffer ()
      "Copy entire buffer to clipboard"
      (interactive)
      (clipboard-kill-ring-save (point-min) (point-max)))

    (defun amd/recompile-all-elpa-packages ()
      "Recompile elc files"
      (interactive)
      (byte-recompile-directory "~/.emacs.d/elpa/" 0))

    (defun make-parent-directory ()
      "Make sure the directory of `buffer-file-name' exists."
      (make-directory (file-name-directory buffer-file-name) t))

    ;; Create parent directories if they don't exist on new files
    (add-hook 'find-file-not-found-functions #'make-parent-directory)

    (defun run-love2d ()
       "run love2d"
       (interactive)
       (async-shell-command (format "cd %s && love ." (projectile-project-root))))

    (defun run-pico8 ()
       "run a pico-8 cartridge then revert buffer"
       (interactive)
       (let ((current-file-path (file-name-base (buffer-file-name (current-buffer))))
             (pico8-command     (cond ((eq system-type 'cygwin)
                                       "/home/anthony/pico-8_win32/pico8.exe -windowed 1 -home 'C:\cygwin64\home\anthony\heliopause-pico-8' -run "
                                       ;; "/home/anthony/pico-8_win32/pico8.exe -windowed 1 -home C:/cygwin64/home/anthony/heliopause-pico-8 "
                                       )
                                      ((eq system-type 'windows-nt)
                                       "c:/Users/anthony/pico-8_win32/pico8.exe -windowed 1 -home C:\\Users\\anthony\\heliopause-pico-8 -run "
                                       )
                                      (amd/using-pocketchip
                                       "/usr/lib/pico-8/pico8 -run ")
                                      (t
                                       "/home/anthony/apps/pico-8/pico8 -run "))))
         (save-buffer)
         (shell-command (concat pico8-command current-file-path))
         ;; (shell-command pico8-command)
         (revert-buffer nil t)))

    (defun run-current-test (&optional line-no only-run-file)
      (interactive)
      (let ((test-file-window (selected-window))
            (test-file-path   (buffer-file-name (current-buffer)))
            (test-command     (cond (only-run-file "")
                                    ((string-match "_spec.rb$" (buffer-file-name (current-buffer)))
                                     "~/.rbenv/shims/ruby ./bin/rspec ")
                                    ((string-match ".py$" (buffer-file-name (current-buffer)))
                                     "py.test -v --doctest-modules ")
                                    ((string-match ".moon$" (buffer-file-name (current-buffer)))                                                               "moon ")
                                    (t
                                     "unknown_test_framework")))
            (rspec-buffer     (get-buffer-window "*rspec*")))
        ;; if the rspec buffer is open
        (if rspec-buffer
            ;; switch focus to it
            (select-window rspec-buffer)
          (progn
            ;; otherwise create a split and switch focus to it
            (select-window (split-window-right))
            (evil-window-move-far-right)
            ;; open the rspec-buffer
            (switch-to-buffer "*rspec*")))
        (erase-buffer)
        (shell-command
         (concat "cd " (projectile-project-root) " && "
                 test-command
                 test-file-path " &") "*rspec*")
        (evil-normal-state)
        (select-window test-file-window)))

    ;; (defun insert-tab-wrapper ()
    ;;   (interactive)
    ;;   (if (string-match "^[ \t]+$" (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
    ;;       (insert (kbd "TAB"))
    ;;     (evil-complete-previous)))

    (defun what-face (pos)
      (interactive "d")
      (let ((face (or (get-char-property (point) 'read-face-name)
                      (get-char-property (point) 'face))))
        (if face
            (let (
                  (face-string (format "%s" face))
                  )
              (kill-new face-string )
              (message "Copied Face: %s" face))
          (message "No face at %d" pos))))

    ;; Rename file https://sites.google.com/site/steveyegge2/my-dot-emacs-file
    (defun rename-file-and-buffer (new-name)
      "Renames both current buffer and file it's visiting to NEW-NAME."
      (interactive (list (read-string "New name:" (buffer-name))))
      (let ((name (buffer-name))
            (filename (buffer-file-name)))
        (if (not filename)
            (message "Buffer '%s' is not visiting a file!" name)
          (if (get-buffer new-name)
              (message "A buffer named '%s' already exists!" new-name)
            (progn
              (rename-file name new-name 1)
              (rename-buffer new-name)
              (set-visited-file-name new-name)
              (set-buffer-modified-p nil))))))

    ;; Line Bubble Functions
    (defun move-line-up ()
      "move the current line up one line"
      (interactive)
      (transpose-lines 1)
      (previous-line 2))

    (defun move-line-down ()
      "move the current line down one line"
      (interactive)
      (next-line 1)
      (transpose-lines 1)
      (previous-line 1))

    (defun evil-move-lines-up (beg end)
      "Move selected lines up one line."
      (interactive "r")
      (evil-move-lines beg end t))

    (defun evil-move-lines-down (beg end)
      "Move selected lines down one line."
      (interactive "r")
      (evil-move-lines beg end))

    (defun evil-move-lines (beg end &optional move-up)
      "Move selected lines up or down."
      (let ((text (delete-and-extract-region beg end)))
        (if move-up
            (beginning-of-line 0)  ;; move to the beginning of the previous line
            (beginning-of-line 2)) ;; move to the beginning of the next line
        (insert text)
        (forward-char -1)
        (evil-visual-line (- (point) (string-width text)) (point))
      )
    )

    (defun evil-eval-print-last-sexp ()
      "Eval print when in evil-normal-state."
      (interactive) (forward-char) (previous-line) (eval-print-last-sexp))

    (defun align-no-repeat (start end regexp)
      "Alignment with respect to the given regular expression."
      (interactive "r\nsAlign regexp: ")
      (align-regexp start end
                    (concat "\\(\\s-*\\)" regexp) 1 1 nil))

    (defun align-repeat (start end regexp)
      "Repeat alignment with respect to the given regular expression."
      (interactive "r\nsAlign regexp: ")
      (align-regexp start end
                    (concat "\\(\\s-*\\)" regexp) 1 1 t))

    (defun align-to-space (begin end)
      "Align region to spaces"
      (interactive "r")
      (align-regexp begin end
                    (rx (group (one-or-more (syntax whitespace))) ) 1 1 t)
      (evil-indent begin end))

    (defun align-to-comma (begin end)
      "Align region to comma signs"
      (interactive "r")
      (align-regexp begin end
                    (rx "," (group (zero-or-more (syntax whitespace))) ) 1 1 t))

    (defun align-to-colon (begin end)
      "Align region to colon"
      (interactive "r")
      (align-regexp begin end
                    (rx ":" (group (zero-or-more (syntax whitespace))) ) 1 1 ))

    (defun align-to-equals (begin end)
      "Align region to equal signs"
      (interactive "r")
      (align-regexp begin end
                    (rx (group (zero-or-more (syntax whitespace))) "=") 1 1 ))

    (defun align-interactively ()
      "invoke align-regexp interactively"
      (interactive)
      (let ((current-prefix-arg 4)) ;; emulate C-u
        (call-interactively 'align-regexp)))

    (defun amd/x-paste ()
      "Paste from the x clipboard with xsel."
      (interactive)
      (insert (shell-command-to-string "xsel -o -b")))

    (defun amd/x-yank (begin end)
      "Yank to the x clipboard with xsel."
      (interactive "r")
      (shell-command-on-region begin end "xsel -i -b"))

    (defun amd/edebug-eval-defun ()
      "Run eval-defun with C-u."
      (interactive)
      (let ((current-prefix-arg 4)) ;; emulate C-u
        (call-interactively 'eval-defun)))

    (defvar hexcolour-keywords
      '(("#[abcdef[:digit:]]\\{6\\}"
         (0 (put-text-property (match-beginning 0)
                               (match-end 0)
                               'face (list :background
                                           (match-string-no-properties 0)))))))
    (defun hexcolour-add-to-font-lock ()
      (interactive)
      (font-lock-add-keywords nil hexcolour-keywords))
    (add-hook 'css-mode-hook 'hexcolour-add-to-font-lock)
  #+END_SRC

* evil-mode

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq x-select-enable-clipboard t)
      (setq x-select-enable-clipboard-manager nil)

      (when amd/using-android
        (progn
          ;; don't use the system clipboard
          (setq x-select-enable-clipboard nil)))

      (setq evil-auto-balance-windows nil)     ;; dont rebalance windows when deleting
      (setq evil-flash-delay .5)
      (setq evil-want-fine-undo 'no)           ;; Make sure undos are done atomically
      (setq evil-want-C-i-jump 'yes)
      (setq evil-want-C-u-scroll 'yes)         ;; find some other way to use emacs C-u?
      (setq evil-want-C-w-in-emacs-state 'yes)
      (setq evil-move-cursor-back nil)         ;; don't move back one charachter when exiting insert

      (setq evil-search-module 'evil-search)   ;; need to set this before loading evil and evil-visualstar
      (setq-default evil-symbol-word-search t) ;; make * and # use the whole word

      ;; join inner paragraph macro
      (fset 'macro-join-inner-paragraph "vipJ^")
      (fset 'key-colon-to-as
        (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([94 100 102 58 36 65 32 97 115 32 escape 112 65 127 44 escape] 0 "%d")) arg)))

      :general
      (:states '(motion)
       ;; hlne movement
       "n" 'evil-next-visual-line
       "e" 'evil-previous-visual-line
       ;; "/" 'swiper
       "C-/" 'swiper
       ;; search using isearch
       ;; "/" 'evil-search-forward
       ;; "k" 'evil-search-next
       ;; "K" 'evil-search-previous
       ;; search using evil's search module
       ;; "/" 'evil-ex-search-forward
       "k" 'evil-ex-search-next
       "K" 'evil-ex-search-previous
       ;; swap * and # to backward and forward respectively
       "*"   'evil-ex-search-word-backward
       "#"   'evil-ex-search-word-forward
       "g *" 'evil-ex-search-unbounded-word-backward
       "g #" 'evil-ex-search-unbounded-word-forward)
      (:states '(normal)
       "C-s" 'save-buffer
       "C-p" 'projectile-find-file
       "g j" 'amd/join-to-end-of-next-line
       "g s" 'count-words
       "g W" 'macro-join-inner-paragraph
       "C-l" (lambda() (interactive) (evil-ex-nohighlight) (redraw-display))
       "C-e" 'move-line-up
       "C-n" 'move-line-down)
      (:states '(visual)
       "C-e" 'evil-move-lines-up
       "C-n" 'evil-move-lines-down)
      (:states '(insert)
       "C-s" (lambda() (interactive) (save-buffer) (evil-normal-state))
       "C-e" 'emmet-expand-line
       "C-y" 'counsel-yank-pop
       "M-t" 'ivy-switch-buffer
       amd/leader-key-insert 'hydra-leader-menu/body)
      (:states '(motion visual)
       ;; Enter opens : prompt
       "C-m" 'evil-ex)
      (:states '(motion visual emacs)
       "M-t" 'ivy-switch-buffer
       "M-b" 'ibuffer
       "M-d" (lambda() (interactive) (dired-other-window (projectile-project-root)))
       amd/leader-key 'hydra-leader-menu/body)
      (:states '(motion emacs)
       "C-w N" 'evil-window-move-very-bottom
       "C-w E" 'evil-window-move-very-top
       "C-w H" 'evil-window-move-far-left
       "C-w L" 'evil-window-move-far-right
       "C-w u" 'winner-undo
       "C-w d" 'winner-redo)
      (:states '(motion) :keymaps 'compilation-mode-map
       "gf" 'find-file-at-point)

      :config
      (evil-mode 1)

      ;; put the current line at the end of the next line
      (defun amd/join-to-end-of-next-line ()
        (interactive)
        (move-line-down) (join-line))

      ;; ESC changes

      ;; NOTE: ESC is Meta inside a terminal

      (global-unset-key (kbd "ESC ESC ESC"))
      (global-unset-key (kbd "ESC ESC"))

      (defun amd/minibuffer-keyboard-quit ()
        "Abort recursive edit. In Delete Selection mode, if the mark is active, just deactivate it; then it takes a second \\[keyboard-quit] to abort the minibuffer."
        (interactive)
        (if (and delete-selection-mode transient-mark-mode mark-active)
            (setq deactivate-mark  t)
          (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
          (abort-recursive-edit)))

      (define-key evil-normal-state-map           [escape] 'keyboard-quit)
      (define-key evil-visual-state-map           [escape] 'keyboard-quit)
      (define-key evil-emacs-state-map            [escape] 'keyboard-quit)
      (define-key minibuffer-local-map            [escape] 'amd/minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map         [escape] 'amd/minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'amd/minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'amd/minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map    [escape] 'amd/minibuffer-keyboard-quit)

      ;; Center Screen on search hit
      ;;   (not sure I want these)
      ;; (advice-add 'evil-ex-search-word-forward            :after #'recenter)
      ;; (advice-add 'evil-ex-search-word-backward           :after #'recenter)
      ;; (advice-add 'evil-ex-search-unbounded-word-forward  :after #'recenter)
      ;; (advice-add 'evil-ex-search-unbounded-word-backward :after #'recenter)
      ;; (advice-add 'evil-ex-search-next                    :after #'recenter)
      ;; (advice-add 'evil-ex-search-previous                :after #'recenter)

      ;; (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
      ;;   (evil-scroll-line-to-center (line-number-at-pos)))
      ;; (defadvice evil-ex-search-previous (after advice-for-evil-ex-search-previous activate)
      ;;   (evil-scroll-line-to-center (line-number-at-pos)))

      (advice-add 'evil-jump-forward  :after #'recenter)
      (advice-add 'evil-jump-backward :after #'recenter)

      (add-to-list 'evil-emacs-state-modes 'dired-mode)
      (add-to-list 'evil-emacs-state-modes 'makey-key-mode)
      (add-to-list 'evil-emacs-state-modes 'magit-popup-mode)
      (add-to-list 'evil-normal-state-modes 'git-commit-mode)

      (add-to-list 'evil-motion-state-modes 'package-menu-mode)
      (add-to-list 'evil-motion-state-modes 'paradox-menu-mode)
      (add-to-list 'evil-motion-state-modes 'flycheck-error-list-mode)


      (defun paste-other-window (beg end other-buffer-window-name)
        (let ((current-file-window (selected-window))
              (current-file-path   (buffer-file-name (current-buffer)))
              (text                (buffer-substring-no-properties beg end))
              (other-window        (get-buffer-window other-buffer-window-name)))
          (when sql-buffer
            (select-window other-window)
            (goto-char (point-max))
            (insert text)
            (comint-send-input)
            (select-window current-file-window))))

      (evil-define-operator paste-to-sql (beg end type)
        "Evil operator for pasting text to another buffer."
        :move-point nil
        (interactive "<R>")
        (paste-other-window beg end "*SQL*"))

      (evil-define-key 'motion (current-global-map)
        (kbd "g p s") 'paste-to-sql)
    )

    (use-package evil-visualstar
      :config
      (global-evil-visualstar-mode 1))

    (use-package evil-surround
      :config
      (global-evil-surround-mode 1)
      (add-hook 'web-mode-hook (lambda ()
                                 (add-to-list 'evil-surround-pairs-alist '(?h . ("{{ " . " }}"))  )
                                 (add-to-list 'evil-surround-pairs-alist '(?= . ("<%= " . " %>")) )
                                 (add-to-list 'evil-surround-pairs-alist '(?- . ("<% "  . " %>")) ))))

    (use-package evil-matchit
      :config
      (global-evil-matchit-mode 1))

    (use-package evil-commentary
      :diminish ""
      :config
      (evil-commentary-mode))

    (use-package evil-case-operators
      :load-path "evil-case-operators"
      :config
      (global-evil-case-operators-mode 1))

    ;; useful find-replaces
    ;; s/\([^ \n]\)  */\1 /g

    (use-package expand-region
      :general
      (:states '(normal)
        "ge" 'er/expand-region))
  #+END_SRC

* packages (built-in)

** Recent Files mode

  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :init
      (setq recentf-max-menu-items 25)
      :config
      (recentf-mode 1))
  #+END_SRC

** re-builder

   - [[info:emacs#Regexps][info:emacs#Regexps]]
   - [[info:emacs#Regexp%20Backslash][info:emacs#Regexp Backslash]]

  #+BEGIN_SRC emacs-lisp
    (use-package re-builder
      :init
      (setq reb-re-syntax 'string))
  #+END_SRC

** saveplace - save last position in a file

  #+BEGIN_SRC emacs-lisp
    (use-package saveplace
      :config
      (when (eq emacs-major-version 24)
        (setq-default save-place t))
      (when (eq emacs-major-version 25)
        (save-place-mode))
      ;; TODO: make this work when in an org-src buffer
      (defadvice find-file (after advice-for-find-file activate) (recenter)) ;; recenter when opening a file?
    )
  #+END_SRC

** savehist - save minibuffer history

  #+BEGIN_SRC emacs-lisp
    (use-package savehist
      ;; save minibuffer history
      :init
      (setq savehist-autosave-interval 150)
      :config
      (savehist-mode))
  #+END_SRC

** desktop - save buffers, windows, and eyebrowse (tabs) between sessions

  #+BEGIN_SRC emacs-lisp
    (use-package desktop
      :init
      (setq desktop-auto-save-timeout 30)
      :config
      (desktop-save-mode 1))
  #+END_SRC

** dired

  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :defer t
      :init
      (put 'dired-find-alternate-file 'disabled nil)
      ;; Suggest locations for operations, ie midnight commander style copy if another window is open.
      (setq dired-dwim-target t)

      ;; Auto refresh dired, but be quiet about it
      (setq global-auto-revert-non-file-buffers t
            auto-revert-verbose nil)

      ;; Always copy/delete recursively
      (setq dired-recursive-copies  'always
            dired-recursive-deletes 'top)

      (setq wdired-allow-to-change-permissions t)
      (setq insert-directory-program
            (or (executable-find "gls")
                (executable-find "ls")))

      :general
      (:states '(emacs)
       :keymaps 'dired-mode-map
       ;; "f" 'dired-find-file ;; default
       ;; "a" 'dired-find-alternate-file ;; default - open a file in the same buffer and close dired
       "RET" 'amd/dired-open-thing
       "C-p" 'projectile-find-file
       "/" 'swiper
       ;; default dired-writable mode is C-x C-q
       ;;   press C-c C-c to commit
       "C-c C-w" 'dired-toggle-read-only
       ;; colemak keys
       "h" 'left-char
       "l" 'right-char
       "e" 'dired-previous-line
       "N" 'dired-next-dirline
       "E" 'dired-prev-dirline)
      :config
      (defun amd/dired-open-thing ()
        "If file at point is a directory open a dired buffer in the same window. Else open in a new window."
        (interactive)
        (dired-find-file)
        ;; (if (file-directory-p (dired-get-filename nil t))
        ;;     (dired-find-alternate-file)
        ;;     (dired-find-file-other-window))
      )

      (defun ora-ediff-files ()
        (interactive)
        (let ((files (dired-get-marked-files))
              (wnd (current-window-configuration)))
          (if (<= (length files) 2)
              (let ((file1 (car files))
                    (file2 (if (cdr files)
                               (cadr files)
                             (read-file-name
                              "file: "
                              (dired-dwim-target-directory)))))
                (if (file-newer-than-file-p file1 file2)
                    (ediff-files file2 file1)
                  (ediff-files file1 file2))
                (add-hook 'ediff-after-quit-hook-internal
                          (lambda ()
                            (setq ediff-after-quit-hook-internal nil)
                            (set-window-configuration wnd))))
            (error "No more than 2 files should be marked"))))


      ;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

      ;; (when (or amd/using-android amd/using-pocketchip)
      (add-hook 'dired-mode-hook 'dired-hide-details-mode)
      ;; )

      (defadvice dired-toggle-read-only (after advice-for-dired-toggle-read-only activate)
        (evil-normal-state)))

    (use-package dired-x)

    (use-package dired-subtree
      :after dired
      :general
      (:states '(emacs) :keymaps '(dired-mode-map)
        "TAB" 'dired-subtree-toggle
        "z" 'dired-subtree-toggle))
  #+END_SRC

** eshell

  #+BEGIN_SRC emacs-lisp

    ;; (require 'xterm-color)
    ;; (progn (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
    ;;        (setq comint-output-filter-functions (remove 'ansi-color-process-output comint-output-filter-functions))
    ;;        (setq font-lock-unfontify-region-function 'xterm-color-unfontify-region))

    (use-package eshell
      :defer t
      :general
      (:states '(normal insert)
        :keymaps '(eshell-mode-map)
        "C-e"  'eshell-previous-prompt
        "C-n"  'eshell-next-prompt
        "C-l"  'eshell/clear-buffer
        "M-e" 'tmux-window-navigation/move-up
        "M-n" 'tmux-window-navigation/move-down)
      (:states '(insert)
       :keymaps '(eshell-mode-map)
        "<down>" 'eshell-next-matching-input-from-input
        "<up>" 'eshell-previous-matching-input-from-input
        "<tab>" (lambda () (interactive) (pcomplete-std-complete)))

      :init
      (setq eshell-history-size 4096)
      (setq eshell-hist-ignoredups t)
      (setq eshell-cmpl-ignore-case t)

      (setq eshell-buffer-maximum-lines 2048)
      (add-hook 'eshell-output-filter-functions 'eshell-truncate-buffer)

      (setq eshell-kill-on-exit t)
      (setq eshell-cd-on-directory t
            eshell-dirtrack-verbose t
            eshell-list-files-after-cd t
            eshell-pushd-tohome t
            eshell-pushd-dunique t)

      (setq eshell-buffer-shorthand t)

      ;; (setenv "PATH" (concat "/usr/local/bin:/usr/local/sbin:" (getenv "PATH")))
      ;; (setenv "PATH"
      ;;         (concat "/usr/local/var/rbenv/shims:"
      ;;                 "/usr/local/var/rbenv/bin:"
      ;;                 (getenv "HOME") "/.rbenv/shims:"
      ;;                 (getenv "HOME") "/.rbenv/bin:" (getenv "PATH")))
      ;; (add-to-list 'exec-path "/usr/local/var/rbenv/shims")
      ;; (add-to-list 'exec-path "/usr/local/var/rbenv/bin")
      ;; (add-to-list 'exec-path (concat (getenv "HOME") "/.rbenv/shims"))
      ;; (add-to-list 'exec-path (concat (getenv "HOME") "/.rbenv/bin"))

      (setenv "PAGER" "cat")

      (defalias 'eshell/e 'find-file-other-window)
      (defalias 'eshell/emacs 'find-file)

      ;; Disable Company mode
      (add-hook 'eshell-mode-hook (lambda () (company-mode -1)))
      (add-hook 'eshell-mode-hook
                (lambda ()
                  (--map (add-to-list 'eshell-visual-commands it) '("sudo" "gcert" "ssh" "tree" "tail"))))

      (defun eshell-projectile-root ()
        "open eshell in projectile-root"
        (interactive)
        (projectile-load-known-projects)
        (let* ((current-eshell-buffer-name "*eshell*") ;; (concat "*eshell:" (projectile-project-name) "*"))
               (current-eshell-buffer      (get-buffer-window current-eshell-buffer-name)))
          (if current-eshell-buffer
              (progn
                (select-window current-eshell-buffer)
                (end-of-buffer)
                (evil-insert-state))
            (progn
              ;; using shackle for poping up an eshell buffer
              ;; (select-window (split-window-below))
              ;; (evil-window-move-very-top)
              (setenv "PATH" (concat (projectile-project-root) "bin:" (getenv "PATH")))
              (add-to-list 'exec-path (concat (projectile-project-root) "bin"))
              (eshell)
              (rename-buffer current-eshell-buffer-name)
              (insert (concat "cd '" (projectile-project-root) "'"))
              (eshell-send-input)))))

      (defun eshell-enable-256-colors ()
        (interactive)
        (require 'xterm-color)
        ;; (add-hook 'eshell-mode-hook (lambda ()
          (setq xterm-color-preserve-properties t)
        ;; ))

        (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
        (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
      )

      ;; (advice-add 'eshell/exit :after #'delete-window)
      (defun eshell/x ()
        (interactive)
        (let* ((current-eshell-buffer (get-buffer-window)))
          (insert "exit")
          (eshell-send-input)
          (delete-window current-eshell-buffer)))

      (defun counsel-esh-directory-history ()
        "Browse Eshell history."
        (interactive)
        (require 'em-dirs)
        (ivy-read
         "Directory History: "
         (cl-loop for index from 0 for dir in (ring-elements eshell-last-dir-ring)
                  collect
                  (cons (format "%-10s %-30s"
                                (propertize (format "cd -%d" index) 'face 'font-lock-builtin-face) dir)
                        (format "-%d" index)))
         :action
         (lambda (arg)
           (eshell-interrupt-process)
           (insert (concat "cd " (cdr arg)))
           (eshell-send-input)
           ;; (eshell/cd (cdr arg))
           ))
        nil
        )

      (defalias 'eshell/d 'counsel-esh-directory-history)

      ;; (defun amd/add-icon-to-eshell-ls (old-function &rest arguments)
      ;;   (let* ((file (car arguments))
      ;;          (decorated-file (apply old-function arguments))
      ;;          (is-directory (string= "d" (substring (nth 9 file) 0 1)))
      ;;          (file-icon
      ;;           (if is-directory
      ;;               (cond
      ;;                ((file-symlink-p decorated-file)
      ;;                 (all-the-icons-octicon "file-symlink-directory" :height 1.2))
      ;;                ((all-the-icons-dir-is-submodule decorated-file)
      ;;                 (all-the-icons-octicon "file-submodule"))
      ;;                ((file-exists-p (format "%s/.git" decorated-file))
      ;;                 (all-the-icons-octicon "repo"))
      ;;                (t (all-the-icons-octicon "file-directory")))
      ;;             (all-the-icons-icon-for-file decorated-file)))
      ;;          )
      ;;     (message "%s" decorated-file)
      ;;     (concat file-icon " " decorated-file)
      ;;     ;; decorated-file
      ;;     )
      ;;   )
      ;; (advice-add 'eshell-ls-decorated-name :around #'amd/add-icon-to-eshell-ls)

      (defun eshell/clear-buffer ()
        "Clear all text in the eshell buffer."
        (interactive)
        (save-excursion
          (goto-char eshell-last-output-end)
          (let ((lines (count-lines 1 (point)))
                (inhibit-read-only t))
            (beginning-of-line)
            (let ((pos (point)))
              (delete-region (point-min) (point))))))
    )

    (use-package em-smart
      :defer t
      :init
      (setq eshell-where-to-jump 'begin)
      (setq eshell-review-quick-commands t)
      (setq eshell-smart-space-goes-to-end t))
  #+END_SRC

** shell
   #+BEGIN_SRC emacs-lisp
     (use-package shell
       :general
       (:states '(normal)
        :keymaps '(shell-mode-map)
         "C-d"  'evil-scroll-down)
       (:states '(normal insert)
        :keymaps '(shell-mode-map)
         "C-e"  'comint-previous-prompt
         "C-n"  'comint-next-prompt
         "C-l"  'comint-clear-buffer
         "M-e" 'tmux-window-navigation/move-up
         "M-n" 'tmux-window-navigation/move-down)
       (:states '(insert)
        :keymaps '(shell-mode-map)
         "<down>" 'comint-next-matching-input-from-input
         "<up>" 'comint-previous-matching-input-from-input
         "<tab>" (lambda () (interactive) (pcomplete-std-complete)))

       :init
       (setq term-buffer-maximum-size 2048)
       (setq comint-buffer-maximum-size 2048)
       (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
     )
   #+END_SRC


** compilation
   #+BEGIN_SRC emacs-lisp
     (use-package compile
       :init
       (setq compilation-scroll-output t)
       (setq compilation-auto-jump-to-first-error nil)

       (setq compilation-finish-functions 'amd/compile-autoclose)
       (defun amd/compile-autoclose (buffer string)
         (cond ((string-match "finished" string)
                (bury-buffer "*compilation*")
                (winner-undo)
                (message "Build successful."))
               (t
                (message "Compilation exited abnormally: %s" string))))

       ;; (setq compilation-finish-function
       ;;       (lambda (buf str)
       ;;         (if (null (string-match ".*exited abnormally.*" str))
       ;;             ;;no errors, make the compilation window go away in a few seconds
       ;;             (progn
       ;;               (run-at-time
       ;;                "2 sec" nil 'delete-windows-on
       ;;                (get-buffer-create "*compilation*"))
       ;;               (message "No Compilation Errors!")))))
     )
   #+END_SRC


** calc

  #+BEGIN_SRC emacs-lisp
    (use-package calc
      ;; :bind (:map calc-mode-map
      :general
      (:states '(emacs)
       :keymaps '(calc-mode-map)
       "C-c h" 'hydra-calc-cs/body
       "ru" 'amd/calc-roll-entire-stack-up
       "rd" 'amd/calc-roll-entire-stack-down)

      :config
      (defun amd/calc-roll-entire-stack-down ()
        (interactive)
        (calc-roll-down-stack (calc-stack-size))
        (calc-refresh))

      (defun amd/calc-roll-entire-stack-up ()
        (interactive)
        (calc-roll-up-stack (calc-stack-size))
        (calc-refresh))

      (defhydra hydra-calc-cs (:color blue :hint nil)
        "
    ^Display^            ^Binary Ops^         ^Units^
    ^^^^^^^^-----------------------------------------------
    _R_: change radix    _a_: and             _c_: convert
    _z_: leading zeros   _o_: or              ^ ^
    ^ ^                  _x_: xor             ^ ^
    ^ ^                  _n_: not             ^ ^
    ^ ^                  _d_: diff            ^ ^
    ^ ^                  _r_: right shift     ^ ^
    ^ ^                  _l_: left shift      ^ ^
        "
        ("R" calc-radix)
        ("z" calc-leading-zeros)
        ("a" calc-and)
        ("o" calc-or)
        ("x" calc-xor)
        ("n" calc-not)
        ("d" calc-diff)
        ("r" calc-rshift-binary)
        ("l" calc-lshift-binary)
        ("c" calc-convert-units))

    ;;   (setq math-additional-units
    ;;         '((bit    nil           "Bit")
    ;;           (byte   "8 * bit"     "Byte")
    ;;           (bps    "bit / s"     "Bit per second"))
    ;;         math-units-table nil)
    )
  #+END_SRC

** winner - window layout undo/redo

  #+BEGIN_SRC emacs-lisp
    (use-package winner
      :config
      (winner-mode 1))
  #+END_SRC

** eww

   [[info:eww#Top][info:eww#Top]]

  #+BEGIN_SRC emacs-lisp
    (use-package eww
      :commands (eww)
      :init
      (when (eq system-type 'gnu/linux)
             (setq browse-url-browser-function 'browse-url-generic
                   browse-url-generic-program "google-chrome")
             (when amd/using-android
               (setq browse-url-generic-program "termux-open-url")))

      (setq eww-search-prefix "http://www.google.com/search?q=")
      (add-to-list 'evil-motion-state-modes 'eww-bookmark-mode)

      :general
      (:states '(motion)
       :keymaps '(eww-mode-map)
        "H" 'eww-back-url
        "L" 'eww-forward-url
        "b" 'eww-list-bookmarks)
      (:states '(motion)
       :keymaps '(eww-bookmark-mode-map)
        "RET" 'eww-bookmark-browse))
  #+END_SRC

* company auto-completion
  #+BEGIN_SRC emacs-lisp
    (use-package pos-tip)

    ;; (use-package auto-complete
    ;;   :diminish ""
    ;;   :config
    ;;   (setq ac-fuzzy-enable t)
    ;;   (setq ac-auto-show-menu t)
    ;;   (setq ac-auto-start t)
    ;;   (setq ac-quick-help-delay 0.3)
    ;;   (setq ac-quick-help-height 30)
    ;;   (setq ac-show-menu-immediately-on-auto-complete t)
    ;;   (ac-config-default)
    ;; )
    ;; (use-package auto-complete-config
    ;; )

    (if window-system
        ;; doesn't work on the console and overwrites M-h keybinding
        (use-package company-quickhelp
          :init
          (set-face-attribute 'tooltip nil :background "#303030" :foreground "#c6c6c6")
          :after pos-tip
          :config
          (company-quickhelp-mode 1)))

    (use-package company
      :diminish ""
      :init
      (setq company-idle-delay 0.2)
      (setq company-minimum-prefix-length 1)
      (setq company-show-numbers t)
      (setq company-tooltip-limit 20)
      (setq company-dabbrev-downcase nil)
      (setq company-dabbrev-ignore-case nil)
      ;; (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
      ;; (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
      ;; (set-face-attribute 'company-preview nil :background "black")
      ;; (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
      ;; (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
      ;; (set-face-attribute 'company-scrollbar-fg nil :background "gray40")
      :general
      (:states '(insert)
        "C-x C-f" 'company-files)
      :config
      (global-company-mode t)
      ;; (add-hook 'after-init-hook 'global-company-mode)

      (setq company-backends
            '((company-files
               company-keywords
               company-capf
               company-yasnippet
               )
              (company-abbrev company-dabbrev)
              ))

      ;; (add-hook 'eshell-mode-hook
      ;;           (lambda ()
      ;;             (add-to-list (make-local-variable 'company-backends)
      ;;                          'company-elisp)))

      ;; Abort company-mode when exiting insert mode
      (defun abort-company-on-insert-state-exit ()
        (company-abort))

      (add-hook 'evil-insert-state-exit-hook 'abort-company-on-insert-state-exit)
    )

    ;; (use-package company-shell
    ;;   :after company
    ;;   :init
    ;;   (setq company-shell-modes '(eshell-mode))
    ;;   :config
    ;;   (add-to-list 'company-backends 'company-shell))
  #+END_SRC

** deprecated - auto-complete

   #+BEGIN_SRC emacs-lisp
     ;; (use-package auto-complete
     ;;   :diminish ""
     ;;   :config
     ;;   (setq ac-fuzzy-enable t)
     ;;   (setq ac-auto-show-menu t)
     ;;   (setq ac-auto-start t)
     ;;   (setq ac-quick-help-delay 0.3)
     ;;   (setq ac-quick-help-height 30)
     ;;   (setq ac-show-menu-immediately-on-auto-complete t)
     ;;   (ac-config-default)
     ;; )
     ;; (use-package auto-complete-config
     ;; )
   #+END_SRC

* key discovery

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :diminish ""
      :init
      ;; (setq which-key-idle-delay 0.5)
      ;; (setq which-key-echo-keystrokes 0)
      ;; (setq echo-keystrokes 0)
      (setq which-key-popup-type 'side-window
            which-key-side-window-location 'bottom
            which-key-show-prefix 'echo)
      :config
      (which-key-mode 1))

    (use-package discover
      :config
      (global-discover-mode 1))

    (use-package discover-my-major)
      ;; :bind (("C-h j" . discover-my-major))
  #+END_SRC

* snippets

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure
      :diminish yas-minor-mode
      :config
      (yas-global-mode))

    (use-package yankpad
      :after yasnippet
      :init
      (setq yankpad-file "~/.emacs.d/yankpad.org")
      :general
      (:states '(insert)
        "C-t" 'yankpad-expand))
  #+END_SRC

* grep

  #+BEGIN_SRC emacs-lisp
    (use-package wgrep)

    (use-package wgrep-pt
      :config
      (autoload 'wgrep-pt-setup "wgrep-pt")
      ;; not necessary, C-x C-q invokes ivy-wgrep-change-to-wgrep-mode
      ;; (add-hook 'ivy-occur-grep-mode-hook 'wgrep-pt-setup)
      (add-hook 'pt-search-mode-hook 'wgrep-pt-setup))

    (use-package wgrep-ag
      :config
      (autoload 'wgrep-ag-setup "wgrep-ag")
      (add-hook 'ag-search-mode-hook 'wgrep-ag-setup))
  #+END_SRC

* magit - version-control

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :defer t
      :init
      (setq magit-last-seen-setup-instructions "1.4.0")
      (setq magit-diff-expansion-threshold 10.0)

      :general
      (:keymaps '(magit-popup-mode-map)
       amd/leader-key 'amd/quit-magit-and-leader)
      (:keymaps '(magit-log-mode-map
                  magit-diff-mode-map
                  magit-process-mode-map
                  magit-status-mode-map)
       "e" 'magit-section-backward
       "p" nil) ;; hit E for ediff popup instead

      :config
      (evil-define-minor-mode-key 'emacs 'magit-popup-mode [escape] 'magit-popup-quit)

      (defun amd/quit-magit-and-leader ()
        "Quit Magit Popup and display leader menu."
        (interactive)
        (magit-popup-quit)
        (hydra-leader-menu/body))
    )

    (use-package ediff
      :init
      (setq ediff-split-window-function 'split-window-horizontally))
  #+END_SRC

* spell checking

  #+BEGIN_SRC emacs-lisp
    (use-package flyspell
      :diminish ""
      :init
      (setq ispell-program-name
            (or (executable-find "aspell")
                (executable-find "hunspell"))))

    (use-package flyspell-correct-ivy
      :after flyspell
      :general
      (:states '(insert)
       "C-x C-s" 'flyspell-correct-previous-word-generic))

    ;; (define-key ctl-x-map "\C-s"
    ;;   #'endless/ispell-word-then-abbrev)

    ;; (defun endless/simple-get-word ()
    ;;   (car-safe (save-excursion (ispell-get-word nil))))

    ;; (defun endless/ispell-word-then-abbrev (p)
    ;;   "Call `ispell-word', then create an abbrev for it.
    ;;   With prefix P, create local abbrev. Otherwise it will
    ;;   be global.
    ;;   If there's nothing wrong with the word at point, keep
    ;;   looking for a typo until the beginning of buffer. You can
    ;;   skip typos you don't want to fix with `SPC', and you can
    ;;   abort completely with `C-g'."
    ;;   (interactive "P")
    ;;   (let (bef aft)
    ;;     (save-excursion
    ;;       (while (if (setq bef (endless/simple-get-word))
    ;;                  ;; Word was corrected or used quit.
    ;;                  (if (ispell-word nil 'quiet)
    ;;                      nil ; End the loop.
    ;;                    ;; Also end if we reach `bob'.
    ;;                    (not (bobp)))
    ;;                ;; If there's no word at point, keep looking
    ;;                ;; until `bob'.
    ;;                (not (bobp)))
    ;;         (backward-word)
    ;;         (backward-char))
    ;;       (setq aft (endless/simple-get-word)))
    ;;     ;; (if (and aft bef (not (equal aft bef)))
    ;;     ;;     (let ((aft (downcase aft))
    ;;     ;;           (bef (downcase bef)))
    ;;     ;;       (define-abbrev
    ;;     ;;         (if p local-abbrev-table global-abbrev-table)
    ;;     ;;         bef aft)
    ;;     ;;       (message "\"%s\" now expands to \"%s\" %sally"
    ;;     ;;                bef aft (if p "loc" "glob")))
    ;;     ;;   (user-error "No typo at or before point"))
    ;;     ))

    ;; (setq save-abbrevs 'silently)
    ;; (setq-default abbrev-mode t)
  #+END_SRC

* navigation

** ido, ido-vertical, flx-ido

   This is replaced by ivy but kept here for reference.

  #+BEGIN_SRC emacs-lisp
    (use-package ido
      :init
      (setq ido-enable-prefix nil)
      (setq ido-use-virtual-buffers t)
      (setq ido-enable-flex-matching t)
      (setq ido-create-new-buffer 'always)
      (setq ido-use-filename-at-point 'guess)
      (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
      :config
      ;; (ido-mode t)
      ;; (ido-everywhere t)
      (ido-vertical-mode))

    (use-package flx-ido
      :init
      (setq ido-use-faces nil) ;; disable ido faces to see flx highlights.
      :config
      (flx-ido-mode 1))
  #+END_SRC

** avy

  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :config
      (setq avy-keys '(?t ?n ?s ?e ?d ?h ?r ?i ?a ?o ?b ?k ?g ?v ?f ?p ?l ?u ?m))
      (setq avy-background t)
      :general
      (:states '(motion)
        "g ." #'avy-goto-char
        "t"   #'avy-goto-word-0
        "T"   #'avy-goto-line))
   #+END_SRC

** undo-tree

  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :diminish ""
      :init
      (setq undo-tree-visualizer-timestamps t
            undo-tree-visualizer-diff t)
    )
  #+END_SRC

** eyebrowse - tabs

  #+BEGIN_SRC emacs-lisp
    (use-package eyebrowse
      :after desktop
      :init
      (defun amd/eyebrowse-next-or-new-window-config ()
        (interactive)
        (let* ((window-configs (eyebrowse--get 'window-configs))
               (match (assq (eyebrowse--get 'current-slot) window-configs))
               (index (-elem-index match window-configs)))
          (if index
              (if (< (1+ index) (length window-configs))
                  (eyebrowse-switch-to-window-config
                   (car (nth (1+ index) window-configs)))
                (eyebrowse-create-window-config))
            (eyebrowse-create-window-config))))

      (setq eyebrowse-mode-line-style 'smart)
      (setq eyebrowse-mode-line-left-delimiter  "⌈"
            eyebrowse-mode-line-right-delimiter "⌉"
            eyebrowse-mode-line-separator       "⌉ ⌈")
      ;; (setq eyebrowse-mode-line-left-delimiter  "|"
      ;;       eyebrowse-mode-line-right-delimiter "|"
      ;;       eyebrowse-mode-line-separator       "| |")

      (defhydra hydra-eyebrowse (:color red :columns 3)
        "
      %s(eyebrowse-mode-line-indicator)
      -----------------------------------------
      _0_-_9_: switch to tab 0-9"
        ("h"  eyebrowse-prev-window-config            "← prev")
        ("c"  eyebrowse-close-window-config           "close")
        ("."  eyebrowse-switch-to-window-config       "switch" :color blue)
        ("l"  amd/eyebrowse-next-or-new-window-config "→ next/new")
        ("r"  eyebrowse-rename-window-config          "rename")
        ("RET" keyboard-escape-quit                   "quit" :exit t)
        ("0" eyebrowse-switch-to-window-config-0 nil)
        ("1" eyebrowse-switch-to-window-config-1 nil)
        ("2" eyebrowse-switch-to-window-config-2 nil)
        ("3" eyebrowse-switch-to-window-config-3 nil)
        ("4" eyebrowse-switch-to-window-config-4 nil)
        ("5" eyebrowse-switch-to-window-config-5 nil)
        ("6" eyebrowse-switch-to-window-config-6 nil)
        ("7" eyebrowse-switch-to-window-config-7 nil)
        ("8" eyebrowse-switch-to-window-config-8 nil)
        ("9" eyebrowse-switch-to-window-config-9 nil))

      :config
      (eyebrowse-mode t))
  #+END_SRC

** ace-window

  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :init
      (setq aw-keys   '(?n ?e ?i ?l ?u ?y)
            aw-dispatch-always t
            aw-swap-invert t
            aw-dispatch-alist
            '((?c aw-delete-window     "Ace - Delete Window")
              (?r aw-swap-window       "Ace - Swap Window")
              (?s aw-split-window-vert "Ace - Split Vert Window")
              (?v aw-split-window-horz "Ace - Split Horz Window")
              (?o delete-other-windows "Ace - Maximize Window")
              (?p aw-flip-window)
              (?= balance-windows)
              ;; (?u winner-undo)
              ;; (?r winner-redo)
              ))
      :config
      ;; (setq aw-keys '(?t ?n ?s ?e ?d ?h ?r ?i ?a ?o ?b ?k ?g ?j ?v ?m ?p ?l))
      ;; show the window letter in the modeline
      ;; (set-face-attribute 'aw-mode-line-face nil :inherit 'mode-line-buffer-id :foreground "lawn green")
      ;; (ace-window-display-mode t)
      (set-face-attribute 'aw-leading-char-face nil :foreground "deep sky blue" :weight 'bold :height 3.0)
      ;; :background "#303030"

      (when (package-installed-p 'hydra)
        (defhydra hydra-window-size (:color red)
          "Windows size"
          ("h" shrink-window-horizontally "shrink horizontal")
          ("n" shrink-window "shrink vertical")
          ("e" enlarge-window "enlarge vertical")
          ("l" enlarge-window-horizontally "enlarge horizontal"))

        (defhydra hydra-window-frame (:color blue)
          "Frame"
          ("m" toggle-frame-maximized "toggle maximize-window")
          ("f" toggle-frame-fullscreen "toggle fullscreen")
          ("n" make-frame "new frame")
          ("c" delete-frame "delete frame"))

        (add-to-list 'aw-dispatch-alist '(?z hydra-window-size/body) t)
        (add-to-list 'aw-dispatch-alist '(?f hydra-window-frame/body) t)))
  #+END_SRC

** ace-link

  #+BEGIN_SRC emacs-lisp
    (use-package ace-link
      :general
      (:states '(motion) :keymaps '(help-mode-map)
        "f"   'ace-link-help
        "TAB" 'help-go-forward
        "C-o" 'help-go-back)
      (:states '(normal) :keymaps '(Info-mode-map)
        "M-n" 'tmux-window-navigation/move-down ;; was clone-buffer
        "f"   'ace-link-info
        "TAB" 'Info-history-forward
        "C-o" 'Info-history-back
        "RET" 'Info-follow-nearest-node
        "q"   'Info-exit)
      (:states '(motion) :keymaps '(compilation-mode-map)
        "f" 'ace-link-compilation)
      (:states '(motion) :keymaps '(woman-mode-map)
        "f" 'ace-link-woman)
      (:states '(motion) :keymaps '(eww-mode-map)
        "f" 'ace-link-eww)
      (:states '(normal) :keymaps '(custom-mode-map)
        "f" 'ace-link-custom)

      :init
      (add-to-list 'evil-motion-state-modes 'help-mode)
      (add-to-list 'evil-motion-state-modes 'compilation-mode)
      (add-to-list 'evil-motion-state-modes 'woman-mode)
      (add-to-list 'evil-normal-state-modes 'Info-mode)
      (add-to-list 'evil-normal-state-modes 'eww-mode)
      (add-to-list 'evil-normal-state-modes 'Custom-mode))
  #+END_SRC

** projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :commands (projectile-load-known-projects projectile-find-file)
      :init
      ;; (setq projectile-completion-system 'helm)
      (setq projectile-completion-system 'ivy)
      ;; (setq projectile-switch-project-action 'projectile-find-file)
      (setq projectile-switch-project-action 'projectile-dired)
      (setq projectile-globally-ignored-directories '("vendor/ruby"))
      (setq projectile-require-project-root nil) ;; use projectile everywhere (no .projectile file needed)
      (setq projectile-enable-caching t)
      (setq projectile-indexing-method 'alien)
      :config
      (projectile-global-mode t))
  #+END_SRC

** shackle

  #+BEGIN_SRC emacs-lisp
    (use-package shackle
      :init
      (setq help-window-select t) ;; not shackle but select new help windows when they open

      (setq shackle-select-reused-windows nil) ; default nil
      (setq shackle-default-alignment 'below) ; default below
      (setq shackle-default-size 0.4) ; default 0.5

      (setq shackle-rules
            ;; CONDITION(:regexp|mode) :select :inhibit-window-quit :size+:align|:other :same|:popup
            '(
              ;; Hidden popups
              ("*Shell Command Output*" :ignore t)
              ("*Async Shell Command*" :ignore t)

              ;; Bottom popups
              ("*Help*" :size 0.3 :align bottom)
              ("*Completions*" :size 0.2 :align bottom)
              (compilation-mode :select nil :size 0.2 :align bottom)

              ("*Warnings*" :select nil :inhibit-window-quit t :other t)

              ;; Top popups
              ("\\*e?shell.*\\*" :regexp t :popup t :size 0.35 :align above)

              ;; Full size popups
              ('magit-status-mode :same t)
              ;; eww popups should just replace current buffer
              ('eww-bookmark-mode :same t)
              ('eww-history-mode :same t)

              ;; left side for dired
              ('dired-mode :other t :align left :size 0.3)

              ;; right side for ibuffer
              ('ibuffer-mode :popup t :align right :size 0.4)
              ('undo-tree-mode :align right :size 0.4)
              ('flycheck-error-list-mode :select t :align right :size 0.4)

              ;; other examples
              ;; ("COMMIT_EDITMSG" :align above :size 0.5) ;; :same t
              ;; ("\\*Async Shell.*\\*" :regexp t :ignore t )
              ;; (occur-mode :select nil :align t )
              ;; ("*Messages*" :select nil :inhibit-window-quit t :other t )
              ;; ("\\*[Wo]*Man.*\\*" :regexp t :select t :inhibit-window-quit t :other t )
              ;; ("\\*poporg.*\\*" :regexp t :select t :other t )
              ;; ("\\`\\*helm.*?\\*\\'" :regexp t :size 0.3 :align t )
              ;; ("*Calendar*" :select t :size 0.3 :align below)
              ))
      (shackle-mode))
  #+END_SRC

** ibuffer

  #+BEGIN_SRC emacs-lisp
    (use-package ibuffer
      :init
      (setq ibuffer-use-header-line t
            ibuffer-use-other-window t)
      :general
      (:states '(emacs)
       :keymaps 'ibuffer-mode-map
       "e" 'ibuffer-backward-line
       "/" 'swiper
       ;; "RET" 'ibuffer-visit-buffer-other-window ;; default is "o"
       ;; "a" 'ibuffer-visit-buffer                ;; default is "RET"
      )
    )

    (use-package ibuffer-vc
      :init
      (add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1)))
      (add-hook 'ibuffer-hook
        (lambda ()
          (ibuffer-vc-set-filter-groups-by-vc-root)
          (unless (eq ibuffer-sorting-mode 'alphabetic)
            (ibuffer-do-sort-by-alphabetic))))
    )
  #+END_SRC

** tmux-window-navigation

  #+BEGIN_SRC emacs-lisp
    (use-package tmux-window-navigation
      :load-path "tmux-window-navigation"
      :config
      (global-tmux-window-navigation-mode 1))
  #+END_SRC

** which-func

  #+BEGIN_SRC emacs-lisp
    ;; (use-package which-func
    ;;   :config
    ;;   (which-function-mode t))
  #+END_SRC

** deprecated

*** helm

    #+BEGIN_SRC emacs-lisp
      ;; (use-package helm
      ;;   :diminish ""
      ;;   :bind (("M-x" . helm-M-x))
      ;;   :init
      ;;   (setq
      ;;    helm-mode-fuzzy-match t
      ;;    helm-completion-in-region-fuzzy-match t
      ;;    helm-recentf-fuzzy-match t
      ;;    helm-buffers-fuzzy-matching t
      ;;    helm-locate-fuzzy-match t
      ;;    helm-M-x-fuzzy-match t
      ;;    helm-semantic-fuzzy-match t
      ;;    helm-imenu-fuzzy-match t
      ;;    helm-apropos-fuzzy-match t
      ;;    helm-lisp-fuzzy-completion t)
      ;;   ;; open new helm split in current window
      ;;   ;; (setq helm-split-window-in-side-p nil)
      ;;   ;; buffer name length to be length of longest buffer name if nil
      ;;   ;; helm-projectile seems to overwrite this for some reason if nil
      ;;   (setq helm-buffer-max-length 50)
      ;;   (setq helm-display-header-line t)
      ;;   :config
      ;;   (helm-mode t)
      ;;   ;; (helm-adaptive-mode t)
      ;;   ;; (helm-autoresize-mode 1)

      ;;   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
      ;;   (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
      ;;   (define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z

      ;;   ;; ;; open helm split at the bottom of a frame
      ;;   ;; ;; https://www.reddit.com/r/emacs/comments/345vtl/make_helm_window_at_the_bottom_without_using_any/
      ;;   ;; (add-to-list 'display-buffer-alist
      ;;   ;;              `(,(rx bos "*helm" (* not-newline) "*" eos)
      ;;   ;;                (display-buffer-in-side-window)
      ;;   ;;                (inhibit-same-window . t)
      ;;   ;;                (window-height . 0.4)))

      ;;   ;; Not compatible with above - using shackle instead
      ;;   ;; Hydra normal mode in Helm
      ;;   (defhydra helm-like-unite (:columns 6)
      ;;     "Normal Mode"
      ;;     ("m" helm-toggle-visible-mark "mark")
      ;;     ("M" helm-toggle-all-marks "(un)mark all")
      ;;     ("p" helm-execute-persistent-action "preview")
      ;;     ("gg" helm-beginning-of-buffer "top")
      ;;     ("G" helm-end-of-buffer "bottom")
      ;;     ("k" helm-buffer-run-kill-persistent "kill")
      ;;     ("h" helm-previous-source "next source")
      ;;     ("l" helm-next-source "prev source")
      ;;     ("n" helm-next-line "down")
      ;;     ("e" helm-previous-line "up")
      ;;     ("q" keyboard-escape-quit "exit" :color blue)
      ;;     ("i" nil "insert"))
      ;;   ;; (key-chord-define helm-map "ne" 'helm-like-unite/body)
      ;;   (define-key helm-map (kbd "C-n") 'helm-like-unite/body)

      ;;   ;; tame helm windows by aligning them at the bottom with a ratio of 40%:
      ;;   (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :ratio 0.4)))

      ;;   ;; ;; disable popwin-mode in an active Helm session It should be disabled
      ;;   ;; ;; otherwise it will conflict with other window opened by Helm persistent
      ;;   ;; ;; action, such as *Help* window.
      ;;   ;; (push '("^\*helm.+\*$" :regexp t) popwin:special-display-config)
      ;;   ;; (add-hook 'helm-after-initialize-hook (lambda ()
      ;;   ;;                                         (popwin:display-buffer helm-buffer t)
      ;;   ;;                                         (popwin-mode -1)))
      ;;   ;; ;;  Restore popwin-mode after a Helm session finishes.
      ;;   ;; (add-hook 'helm-cleanup-hook (lambda () (popwin-mode 1)))
      ;; )

      ;; (use-package helm-config
      ;;   :defer t
      ;; )
      ;; (use-package helm-projectile
      ;;   ;; :defer t
      ;;   :config
      ;;   (helm-projectile-on)
      ;; )
      ;; (use-package helm-descbinds
      ;;   :defer t
      ;;   :bind (("C-h j" . helm-descbinds))
      ;;   :config
      ;;   (helm-descbinds-mode)
      ;; )
      ;; (use-package helm-flx
      ;;   :defer t
      ;;   :config
      ;;   (helm-flx-mode +1)
      ;; )
      ;; (use-package helm-fuzzier
      ;;   :defer t
      ;;   :config
      ;;   (helm-fuzzier-mode 1)
      ;; )

      ;; (defun helm-projectile-invalidate-cache ()
      ;;   (interactive) (projectile-invalidate-cache (projectile-project-root)) (helm-projectile))

      ;; (defun helm-do-grep-recursive (&optional non-recursive)
      ;;   "Like `helm-do-grep', but greps recursively by default."
      ;;   (interactive "P")
      ;;   (let* ((current-prefix-arg (not non-recursive))
      ;;          (helm-current-prefix-arg non-recursive))
      ;;     (call-interactively 'helm-do-grep)))
    #+END_SRC

*** key-chord

    #+BEGIN_SRC emacs-lisp
    ;; (use-package key-chord
    ;;   :config
    ;;   (setq key-chord-two-keys-delay 0.2)
    ;;   (key-chord-define evil-insert-state-map "--" (lambda() (interactive) (insert "_")))
    ;;   ;; (key-chord-define evil-insert-state-map "jj" (lambda() (interactive) (evil-normal-state) (evil-forward-char)))
    ;;   (key-chord-mode 1)
    ;; )
    #+END_SRC

* email
  #+BEGIN_SRC emacs-lisp
    (eval-and-compile
      (defun amd/mu4e-load-path ()
        (list "~/apps/mu/share/emacs/site-lisp/mu4e"
              "~/homebrew/share/emacs/site-lisp/mu4e"
              "/usr/local/share/emacs/site-lisp/mu4e")))

    (use-package mu4e
      :commands (mu4e)
      :load-path (lambda () (amd/mu4e-load-path))
      :init
      (let ((mbsync-bin (cl-find-if 'file-exists-p (list "~/apps/isync/bin/mbsync"
                                                         "~/homebrew/bin/mbsync"
                                                         "/usr/local/bin/mbsync"))))
        (when mbsync-bin
          (setq mu4e-get-mail-command (concat mbsync-bin " -V gmail"))))

      ;; (setq mu4e-update-interval 120)
      (setq mu4e-change-filenames-when-moving t) ;; needed for mbsync

      (setq mu4e-confirm-quit nil)
      (let ((mu4e-bin (cl-find-if 'file-exists-p (list "~/apps/mu/bin/mu"
                                                       "~/homebrew/bin/mu"
                                                       "/usr/local/bin/mu"))))
        (when mu4e-bin
          (setq mu4e-mu-binary mu4e-bin)))
      :config
      ;; (add-to-list 'evil-motion-state-modes 'mu4e-view-mode)

      ;; when refiling from message view and hitting x
      ;; the focus is on the header window instead of the message
      (advice-add 'mu4e-mark-execute-all :after #'mu4e-select-other-view)

      ;; (mapc (lambda (current-mode-map-name)
      ;;         (define-key current-mode-map-name amd/leader-key 'hydra-leader-menu/body))
      ;;       '(mu4e-headers-mode-map
      ;;         mu4e-view-mode-map
      ;;         mu4e-main-mode-map))

      (define-key mu4e-headers-mode-map (kbd "e") 'mu4e-headers-prev)
      (define-key mu4e-view-mode-map (kbd "n") 'next-line)
      (define-key mu4e-view-mode-map (kbd "e") 'previous-line)
      (define-key mu4e-view-mode-map (kbd "C-e") 'mu4e-view-headers-prev)
      (define-key mu4e-view-mode-map (kbd "C-n") 'mu4e-view-headers-next)

      (define-key mu4e-view-mode-map (kbd "C-d") 'mu4e-view-scroll-up-or-next)
      (define-key mu4e-view-mode-map (kbd "C-u") 'scroll-down-command)

      (setq mu4e-use-fancy-chars nil)
      (setq mu4e-attachment-dir "~/Download")
      (setq mu4e-view-show-images t)
      (setq mu4e-view-show-addresses t)
      (setq mu4e-view-scroll-to-next nil)

      (when (fboundp 'imagemagick-register-types)
        (imagemagick-register-types))

      (load "~/.emacs.d/email-settings.el")

      (add-to-list 'mu4e-bookmarks '("flag:flagged" "Flagged" ?f))

      (defun amd/mu4e-open-docx-attachment-in-emacs (msg attachnum)
        "Count the number of lines in an attachment."
        (mu4e-view-pipe-attachment msg attachnum "cat > ~/Downloads/attachment.docx && pandoc -f docx -t org ~/Downloads/attachment.docx"))

      (defun amd/mu4e-open-xlsx-attachment-in-emacs (msg attachnum)
        "Count the number of lines in an attachment."
        (mu4e-view-pipe-attachment msg attachnum "cat > ~/Downloads/attachment.xlsx && xlsx2csv ~/Downloads/attachment.xlsx"))

      ;; defining 'n' as the shortcut
      (add-to-list 'mu4e-view-attachment-actions
        '("cview-docx" . amd/mu4e-open-docx-attachment-in-emacs) t)
      (add-to-list 'mu4e-view-attachment-actions
        '("xview-xlsx" . amd/mu4e-open-xlsx-attachment-in-emacs) t)

      (defun amd/mu4e-view-org-message-in-emacs (msg)
        "View a pandoc converted version of the message in emacs."
        ;; (mu4e-view-pipe "cat > ~/Downloads/message.html && pandoc -f html -t org ~/Downloads/message.html"))
        (mu4e-view-pipe "pandoc -f html -t org"))

      (add-to-list 'mu4e-view-actions
        '("emacs org view" . amd/mu4e-view-org-message-in-emacs) t)
      (add-to-list 'mu4e-view-actions
        '("browser view" . mu4e-action-view-in-browser) t)

    )

    ;; make sure eww is loaded before the below

    (use-package mu4e-contrib
      :commands (mu4e)
      :load-path (lambda () (amd/mu4e-load-path))
      :init
      (setq shr-external-browser 'browse-url-generic) ;; this must be a function, not an external command
      (setq mu4e-html2text-command 'mu4e-shr2text) ;; same as eww
      ;; (setq shr-color-visible-luminance-min 1) ;; for dark theme?
      ;; (setq mu4e-html2text-command "w3m -T text/html")
      ;; (setq mu4e-html2text-command "pandoc -f html -t org")
      :config
      (defun amd/mu4e-open-link-in-browser ()
        "Open a visible eww link in the web browser."
        (interactive)
        (let ((res (avy-with ace-link-eww
                     (avy--process
                      (mapcar #'cdr (ace-link--eww-collect))
                      #'avy--overlay-post))))
          (when res
            (goto-char (1+ res))
            (if (eww-follow-link t)
                ;; eww-follow-link retuns a "No link at point"
                ;; string when it cant open a link and nil if successful
                (org-open-at-point)))))

      ;; (add-hook 'mu4e-view-mode-hook
      ;;           (lambda()
      ;;             (local-set-key (kbd "f") 'amd/mu4e-open-link-in-browser)))
      (define-key mu4e-view-mode-map (kbd "f") 'amd/mu4e-open-link-in-browser)
    )

    (use-package org-mu4e
      :commands (mu4e)
      :init
      (setq org-mu4e-link-query-in-headers-mode nil))

    (use-package smtpmail
      :config
      (setq smtpmail-queue-mail t)
      (setq smtpmail-queue-dir  "~/Mail/queue/cur")

      (setq message-kill-buffer-on-exit t)
    )
  #+END_SRC

* language major-modes
  #+BEGIN_SRC emacs-lisp
    (use-package emacs-lisp
      :general
      (:states '(normal visual)
       :keymaps '(emacs-lisp-mode-map)
       "N" 'forward-sexp
       "E" 'backward-sexp)
      :init
      ;; https://github.com/Fuco1/.emacs.d/blob/af82072196564fa57726bdbabf97f1d35c43b7f7/site-lisp/redef.el#L20-L94

      ;; (add-hook 'emacs-lisp-mode-hook
      ;;         (lambda () (setq-local lisp-indent-function #'Fuco1/lisp-indent-function)))
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (setq-local lisp-indent-function #'common-lisp-indent-function))))

    (use-package lua-mode
    :init
      (setq lua-indent-level 2))

    ;; Markdown mode
    (use-package markdown-mode
      :init
      (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
      (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
      (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    )

    ;; Web Settings
    (use-package web-mode
      :init
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-engines-alist '(("liquid" . "\\.html\\'")))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
    )

    (use-package python
      :commands python-mode
      :init
      (setq python-shell-interpreter "ipython"
            python-shell-interpreter-args "-i"))

    ;; Python Settings
    (use-package company-jedi
      :commands python-mode
      :general
      (:states '(insert) :keymaps '(python-mode-map)
        "C-." 'company-jedi)
      :config
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook
                (lambda ()
                  (add-to-list (make-local-variable 'company-backends)
                               'company-jedi))))

    (use-package js2-mode
      :defer t
      :init
      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
      ;; (add-hook 'js-mode-hook 'js2-minor-mode)
    )

    ;; (use-package ac-js2
    ;;   :defer t
    ;;   :init
    ;;   (add-hook 'js2-mode-hook 'ac-js2-mode)
    ;; )

    ;; Ruby Settings
    (use-package robe
      :defer t
      :init
      (setq ruby-deep-indent-paren nil)
      (add-hook 'ruby-mode-hook 'robe-mode)
      (add-hook 'robe-mode-hook 'ac-robe-setup)
      ;; (push 'company-robe company-backends)

      (add-hook 'ruby-mode-hook (lambda () (modify-syntax-entry ?_ "w")))
      ;; super word should handle the above
      ;; (add-hook 'ruby-mode-hook 'superword-mode)

      (eval-after-load 'inf-ruby
        `(add-to-list 'inf-ruby-implementations '("bundle console")))

      ;; (add-to-list 'load-path "~/.emacs.d/xmpfilter")
      ;; (require 'rcodetools)
      ;; (global-set-key (kbd "C-c C-c") 'xmp)
    )

    (add-hook 'python-mode-hook
              (function (lambda ()
                          (setq evil-shift-width python-indent))))
    (add-hook 'ruby-mode-hook
              (function (lambda ()
                          (setq evil-shift-width ruby-indent-level))))

    (use-package yari)

    (add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.p8\\'" . lua-mode))

    (use-package flycheck
      :diminish ""
      :config
      (global-flycheck-mode)
    )

    (use-package flymake-ruby
      :init
      (add-hook 'ruby-mode-hook 'flymake-ruby-load)
    )

    (use-package flymake-haml
      :init
      (add-hook 'haml-mode-hook 'flymake-haml-load)
    )

    (use-package sql
      :general
      (:states '(normal)
       :keymaps '(sql-interactive-mode-map)
        "C-d"  'evil-scroll-down)
      (:states '(insert)
       :keymaps '(sql-interactive-mode-map)
        "<up>"   'comint-previous-input
        "<down>" 'comint-next-input)
      (:states '(normal insert)
       :keymaps '(sql-interactive-mode-map)
        "C-e" 'comint-previous-prompt
        "C-n" 'comint-next-prompt
        "C-l" 'comint-clear-buffer
        "M-e" 'tmux-window-navigation/move-up
        "M-n" 'tmux-window-navigation/move-down)
      :init
      (add-hook 'sql-mode-hook 'sqlup-mode))

    (use-package sql-indent
      :init
      (setq sql-indent-offset 2)
      (setq sql-indent-first-column-regexp
            (concat
             "\\(^\\s-*"
             (regexp-opt
              '("select" "update" "insert" "delete"
                "union" "intersect"
                "from" "where" "into" "group" "having" "order" "limit"
                "join" "right join" "left join" "right outer join" "left outer join" "right inner join" "left inner join"
                "set"
                "create" "drop" "truncate"
                "define" "eof" "export"
                ")"
                "--") t) "\\(\\b\\|\\s-\\)\\)\\|\\(^```$\\)"))
      (eval-after-load "sql"
        '(load-library "sql-indent")))

    (use-package scad-mode
      :init
      (when (eq system-type 'darwin)
        (setq scad-command "/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD")))

    (use-package graphviz-dot-mode
      :init
      (setq graphviz-dot-auto-indent-on-semi nil
            graphviz-dot-auto-indent-on-newline nil
            graphviz-dot-dot-program "dot"
            graphviz-dot-preview-extension "svg")
    )

    (use-package mmm-mode)
    (use-package mmm-jinja2
      :after mmm-mode
      :config
      (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . html-mode))
      (mmm-add-mode-ext-class 'html-mode "\\.jinja2\\'" 'jinja2)
      (add-to-list 'auto-mode-alist '("\\.tmpl\\'" . fundamental-mode))
      (mmm-add-mode-ext-class 'fundamental-mode "\\.tmpl\\'" 'jinja2)
    )
  #+END_SRC

* hydra

  | color    | toggle                     |
  |----------+----------------------------|
  | red      |                            |
  | blue     | :exit t                    |
  | amaranth | :foreign-keys warn         |
  | teal     | :foreign-keys warn :exit t |
  | pink     | :foreign-keys run          |

  #+BEGIN_SRC emacs-lisp
    (use-package hydra)

    (defun amd/hydra-column-hint (column-groups)
      "Generate a hydra hint string from a list of COLUMN-GROUPS."
      (require 's)
      (require 'dash)
      (let* ((column-strings
              ;; collect the key and name string for each hydra head
              ;; fill columns to the same height with the "^^" string
              (apply #'-pad (cons '("^^" " ")
                                  (-map (lambda (column-group)
                                          (-map (lambda (column-head)
                                                  ;; get the strings defined in this head
                                                  (setq h (-filter 'stringp column-head))
                                                  ;; surround the key string with underscores
                                                  (if (equal nil h)
                                                      (list "^^" " ")
                                                    (list (s-concat "_" (-first-item h) "_") (-last-item h)))
                                                  )
                                                column-group))
                                        column-groups))))
             ;; get the max key string width for each column
             (max-key-widths
              (-map (lambda (column-group)
                      (-max
                       (-map (lambda (column-head)
                               (length (-first-item column-head)))
                             column-group)))
                    column-strings))
             ;; get the max name string width for each column
             (max-name-widths
              (-map (lambda (column-group)
                      (-max
                       (-map (lambda (column-head)
                               (length (-last-item column-head)))
                             column-group)))
                    column-strings)))

        ;; build the hint string starting with a "\n"
        (let ((hint "\n"))
          ;; for each row
          (-each (-iterate '1+ 0 (length (car column-strings)))
            (lambda (row-index)
              ;; get the current row
              (setq row (-select-column row-index column-strings))
              ;; append the new row
              (setq hint
                    (concat
                     hint
                     (s-join "  " ;; join the colums
                             (--map (s-join "  " it) ;; join the key and name strings →
                                    (-zip-with 'list
                                               ;; right-pad the key string with the max key string width for this column
                                               (-map (lambda (pair)
                                                       (s-pad-right (-first-item pair) " " (-last-item pair)))
                                                     (-zip-with 'list max-key-widths (-select-column 0 row)))
                                               ;; right-pad the name string with the max name string width for this column
                                               (-map (lambda (pair)
                                                       (s-pad-right (-first-item pair) " " (-last-item pair)))
                                                     (-zip-with 'list max-name-widths (-select-column 1 row))
                                                     ))))
                     "\n" ))))
          hint)))

    (defun amd/define-hydra-with-columns (name color columns)
      "Create a column based hydra with the given NAME, COLOR, and COLUMNS."
      (interactive)

      (eval `(defhydra ,name (:color ,color :hint nil)
               ,(amd/hydra-column-hint columns)
               ,@(-flatten-n 1 (-map (lambda (column-group)
                                       (--filter (not (null it))
                                                 (-map (lambda (column-head)
                                                         (-remove-last 'stringp column-head))
                                                       column-group))
                                       )
                                     (-clone columns))))))

    ;; ;; For quoting with , and ,@ see:
    ;; ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
    ;; (eval `(defhydra hydra-org-menu (:color blue :hint nil :columns ,(length amd/hydra-org-columns))
    ;;          "Hydra-Org"
    ;;          ,@(->> (-iterate '1+ 0 (length (car amd/hydra-org-columns))) ;; (0 1 2 3 4 ... )
    ;;                 (-map (lambda (i) (-select-column i amd/hydra-org-columns)))
    ;;                 (-flatten-n 1)
    ;;                 (-non-nil))))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  #+END_SRC

* hydra leader menus

** Main Leader Hydra

   #+BEGIN_SRC emacs-lisp
     (amd/define-hydra-with-columns
      'hydra-leader-menu
      'blue
      `(

        (
         ("d"  counsel-find-file           "[Files] find-file")
         ("fn" rename-file-and-buffer      "[Files] reName")
         ("fr" ivy-recentf                 "[Files] Recent")
         ("fp" projectile-recentf          "[Files] recent-proj-files")
         ("ft" neotree                     "[Files] neotree")
         ("fc" flycheck-list-errors        "[Files] flyCheck")
         ("bb" ivy-switch-buffer           "[buffer] switch")
         ("bi" ibuffer                     "[buffer] ibuffer")
         ("bk" kill-this-buffer            "[buffer] kill-this")
         ("w"  ace-window                  "[window] ")
         ("t"  hydra-eyebrowse/body        "[tabs] ")
         ("j"  counsel-imenu               "[jump] imenu")
         (,amd/leader-key  amd/major-mode-leader-hydra "major-mode hydra")
         )

        (
         ("ar" align-repeat           "[align] repeat")
         ("an" align-no-repeat        "[align] no-repeat")
         ("a:" align-to-colon         "[align] :")
         ("a=" align-to-equals        "[align] =")
         ("a," align-to-comma         "[align] ,")
         ("as" align-to-space         "[align] whitespace")
         ("ai" align-interactively    "[align] interactive")
         ()
         ("G"  counsel-git-grep       "[search] git grep")
         ("pt" counsel-pt             "[search] pt counsel")
         ("pp" projectile-pt          "[search] pt projectile")
         ("po" pt-regexp              "[search] pt other-dir")
         ("/"  counsel-grep-or-swiper "[search] grep/swiper")
         )

        (
         ("la" counsel-linux-app     "linux apps")
         ("lt" load-theme            "load-theme")
         ("lc" list-colors-display   "list-colors")
         ("lf" list-faces-display    "list-faces")
         ("lp" package-list-packages "list-packages")
         ()
         ("hk" counsel-descbinds               "[help] keys")
         ("hK" which-key-show-top-level        "[help] top-level whichkey")
         ("hm" (describe-variable 'major-mode) "[help] Major-mode name")
         ("hr" yari                            "[help] Ruby")

         ("yb" amd/copy-buffer "yank buffer")
         ("yxy" amd/x-yank "yank w/ xsel")
         ("yxp" amd/x-paste "paste w/ xsel")
         )

        (
         ("g"  magit-status                "[git] ")
         ("pi" projectile-invalidate-cache "[projectile] clear")
         ("ps" ivy-switch-project          "[projectile] switch")
         ("pe" eshell-projectile-root      "[projectile] eshell")
         ("u" undo-tree-visualize "undo-tree")
         ("v" (find-file user-emacs-directory) "open .emacs")
         ()
         ("rt" run-current-test         "run-test")
         ("rf" (run-current-test nil t) "run-file")
         ("rp" run-pico8         "run-pico8")
         ("rl" run-love2d        "run-love2d")
         ("C" compile "compile")
         ("c" calc-dispatch "[calc]")
         )

        (
         ("zi" (text-scale-increase 0.5) "zoom-in" :color pink)
         ("zo" (text-scale-decrease 0.5) "zoom-out" :color pink)
         ("DS" desktop-save "desktop-save")
         ("DC" desktop-clear "desktop-clear")
         ("DL" desktop-read "desktop-read")
         ("Xf" (shell-command-on-region (point-min) (point-max) "xmllint --format -" (current-buffer) t) "[xml] format")
         ()
         ("sd" server-edit "[server] done")
         ("st" toggle-truncate-lines "[set] truncate-lines")
         ("sf" auto-fill-mode "[set] auto-fill-mode")
         ("WC" count-words "[word-count]")
         ("x"  counsel-M-x "M-x")
         ("q"  keyboard-quit :exit t  "close")
         )
        )
      )

     ;; ("bk" kill-buffer                 "[buffer] kill")
     ;; ("y"  counsel-yank-pop            "yank hist--ory") use ctrl-y in evil insert mode
     ;; ("im" counsel-imenu "imenu")
     ;; ("q"  keyboard-escape-quit :exit t  "close")
     ;; ("m" mu4e "mu4e")

     ;; (define-key evil-normal-state-map amd/leader-key 'hydra-leader-menu/body)
     ;; (define-key evil-motion-state-map amd/leader-key 'hydra-leader-menu/body)
     ;; (define-key evil-visual-state-map amd/leader-key 'hydra-leader-menu/body)

     ;; (setq hydra-key-doc-function 'amd/hydra-key-doc-function)
     ;; (defun amd/hydra-key-doc-function (key key-width doc doc-width)
     ;;   "Doc"
     ;;   (format (format "%%%ds %%%ds" key-width (- -1 doc-width))
     ;;           key doc))
     #+END_SRC

** Major Mode Leader Hydra Function

  #+BEGIN_SRC emacs-lisp
    (defun amd/major-mode-leader-hydra ()
      (interactive)
      (cond ((eq major-mode 'org-mode)
             (hydra-org-menu/body))
            ((or (eq major-mode 'lisp-interaction-mode) (eq major-mode 'emacs-lisp-mode))
             (hydra-elisp-menu/body))
            ((member 'org-src-mode minor-mode-list) ;; if no major-mode leader hydra defined, and an org-src buffer is active, use the org hydra
             (hydra-org-menu/body))
            (t
             (keyboard-quit))))
  #+END_SRC

** Org Hydra

   #+BEGIN_SRC emacs-lisp
     (defun amd/toggle-org-edit-code-block ()
       "Start or finish editing an org code block."
       (interactive)
       (if org-src--beg-marker ;; (cl-find 'org-src-mode minor-mode-list)
           (progn
             (org-edit-src-exit)
             (recenter))
         (progn
           (org-edit-special)
           (recenter))))

     (amd/define-hydra-with-columns
      'hydra-org-menu
      'blue
      '((("cc" org-capture "capture")
         ("cl" org-store-link "store link")
         ("tp" (lambda() (interactive)
                 ;; (let ((current-prefix-arg 4)) ;; emulate C-u
                 ;;   (call-interactively 'org-babel-tangle))
                 (org-narrow-to-element)
                 (org-babel-tangle)
                 (widen)
                 ) "tangle at point")
         ("ta" org-babel-tangle "tangle all")
         ("o" (lambda() (interactive) (find-file org-default-notes-file)) "open todos"))

        (
         ("fc" org-table-toggle-coordinate-overlays "formula coords")
         ("fd" org-table-toggle-formula-debugger "formula debug")
         ("fe" (lambda() (interactive)
                 (let ((current-prefix-arg '(16))) ;; emulate C-u C-u
                   (call-interactively 'org-table-eval-formula)
                   (evil-insert-state)
                   )) "formula edit")
         ("fr" (lambda() (interactive)
                 (let ((current-prefix-arg '(4))) ;; emulate C-u
                   (call-interactively 'org-table-recalculate)
                   )) "formula recalc")
         )

        (("P" org-set-property "property")
         ("S" org-schedule "schedule")
         ("D" org-deadline "due")
         ("r" org-refile "refile")
         ("p" org-priority "priority"))

        (
         ("a" org-agenda "agenda")
         ("y" org-archive-subtree "archive subtree")
         ("R" org-mode-restart "restart")
         ("l" counsel-org-tag "change tag (label)")
         ("e" amd/toggle-org-edit-code-block "code edit"))

        (("tt" org-show-todo-tree "todo tree")
         ("A" (lambda() (interactive) (show-all) (org-remove-occur-highlights)) "show all")
         ("w" widen "widen")
         ("n" org-narrow-to-subtree "subtree")
         ("gl" org-match-sparse-tree "tag tree"))

        (("d" pandoc-main-hydra/body "pandoc")
         ("hy" amd/clipboard-org-to-html "org→html→yank")
         ("hp" amd/clipboard-html-to-org "html→org→paste")
         ("x" org-export-dispatch "export")
         ("q"  keyboard-quit :exit t "close")
         )

        ;; (("h" org-shiftmetaleft  "←" :color pink)
        ;;  ("l" org-shiftmetaright "→" :color pink)
        ;;  ("n" org-shiftmetadown  "↓" :color pink)
        ;;  ("e" org-shiftmetaup    "↑" :color pink))

        ))
   #+END_SRC

** Emacs-Lisp Hydra

   #+BEGIN_SRC emacs-lisp
     (amd/define-hydra-with-columns
      'hydra-elisp-menu
      'blue
      '((("e" amd/toggle-org-edit-code-block "[org] toggle code edit")
         )
        (("d" eval-defun            "eval defun")
         )
        (("D" amd/edebug-eval-defun "eDebug defun")
         )
        (("q"  keyboard-quit :exit t "close"))
        ))
   #+END_SRC

* ivy, swiper, and counsel

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :config

      (defvar ivy-switch-project-map (make-sparse-keymap))

      (defun ivy-switch-project ()
        (interactive)
        (let ((this-command 'ivy-switch-project))
          (projectile-load-known-projects)
          (ivy-read
           "Switch to project: "
           ;; (if (projectile-project-p)
           ;;     (cons (abbreviate-file-name (projectile-project-root))
           ;;           (projectile-relevant-known-projects))
           ;;   projectile-known-projects)
           projectile-known-projects
           :action #'projectile-switch-project-by-name
           :keymap ivy-switch-project-map)))

      (ivy-set-actions
       'ivy-switch-project
       '(("k"
          (lambda (x)
            (setq projectile-known-projects
                  (--reject (string= x it) projectile-known-projects))
            (projectile-merge-known-projects)
            ;; (projectile-remove-known-project x)
            (ivy--reset-state ivy-last))
          "remove project")
         ("d"
          (lambda (x)
            (dired x)
            )
          "dired")))

      (defhydra hydra-ivy-switch-project (:color pink)
        "Buffer Actions"
        ("k" amd/ivy-remove-project)
        ("gg" ivy-beginning-of-buffer)
        ("n" ivy-next-line)
        ("e" ivy-previous-line)
        ("G" ivy-end-of-buffer)
        ("o" keyboard-escape-quit :exit t)
        ("C-g" keyboard-escape-quit :exit t)
        ("i" nil)
        )

      (define-key ivy-switch-project-map (kbd "C-b") 'hydra-ivy-switch-project/body)

      (defun amd/ivy-remove-project ()
        (interactive)
        (setq projectile-known-projects
              (--reject (string= ivy--current it) projectile-known-projects))
        (projectile-merge-known-projects)
        (ivy--reset-state ivy-last))
    )

    (use-package swiper
      :diminish ivy-mode
      :init
      (setq ivy-display-style 'fancy)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-height 10)
      (setq enable-recursive-minibuffers t)
      :general
      (:states '(normal)
       :keymaps '(ivy-occur-grep-mode-map)
        "M-n" 'tmux-window-navigation/move-down ;; was compilation-next-error
        "n" 'ivy-occur-next-line
        "e" 'ivy-occur-previous-line
        "C-n" 'next-error-no-select
        "C-e" 'previous-error-no-select)

      :config
      (ivy-mode 1)

      (eval-after-load "ivy"
        `(progn
           (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)))

      (eval-after-load "ivy-hydra"
        `(progn
           (define-key hydra-ivy/keymap (kbd "h") 'hydra-ivy/ivy-prev-action)
           (define-key hydra-ivy/keymap (kbd "l") 'hydra-ivy/ivy-next-action)
           (define-key hydra-ivy/keymap (kbd "n") 'hydra-ivy/ivy-next-line)
           (define-key hydra-ivy/keymap (kbd "e") 'hydra-ivy/ivy-previous-line)))

      (defun amd/update-evil-search ()
        "Update evil search pattern with swiper regex and recenter."
        (recenter)
        (let ((count 1)
              (direction 'forward)
              (regex (ivy--regex ivy-text)))
          ;; This bit is mostly taken from evil-ex-start-word-search
          (setq evil-ex-search-count count
                evil-ex-search-direction direction
                evil-ex-search-pattern (evil-ex-make-search-pattern regex)
                evil-ex-search-offset nil
                evil-ex-last-was-search t)
          ;; update search history unless this pattern equals the previous pattern
          (unless (equal (car-safe evil-ex-search-history) regex)
            (push regex evil-ex-search-history))
          (evil-push-search-history regex (eq direction 'forward))
          ;; set the highlight
          (evil-ex-search-activate-highlight evil-ex-search-pattern)))

      (advice-add 'swiper                 :after #'amd/update-evil-search)
      (advice-add 'counsel-grep           :after #'amd/update-evil-search)
      (advice-add 'counsel-grep-or-swiper :after #'amd/update-evil-search)

    )

    (use-package smex) ;; used by counsel

    (use-package counsel
      :after smex
      :bind (("M-x"     . counsel-M-x)
             ("C-h v"   . counsel-describe-variable)
             ("C-h C-v" . counsel-describe-variable)
             ("C-h f"   . counsel-describe-function)
             ("C-h C-f" . counsel-describe-function)
             ("C-h C-k" . counsel-descbinds))
      :init
      (setq counsel-grep-base-command "grep -niE \"%s\" %s")
      :config
      (defun counsel-calc-units ()
        (interactive)
        (require 'calc-units) ;; needed to access math-standard-units variable
        (let ((this-command 'counsel-calc-units))
          (ivy-read "Unit: "
           (mapcar (lambda (unit-list)
              (let* ((command (car unit-list))
                     (key (symbol-name command))
                     (doc (delq nil (mapcar (lambda (item) (when (stringp item) item)) (cdr unit-list))))
                     (doc-size (length doc))
                     (definition (cond ((eq doc-size 1) key) ((eq doc-size 2) (car doc)) ((eq doc-size 3) (car (reverse doc)))))
                     (description (cond ((eq doc-size 1) (format "%s (base unit)" (car (reverse doc)))) (t (car (cdr doc))))))
                (cons (format "%-12s %-30s %s" (propertize key 'face 'font-lock-builtin-face) definition description) key)))
            (append math-additional-units math-standard-units))
           :action (lambda (arg) (calc-alg-entry (cdr arg) ))
           )))

      (ivy-set-actions
       'counsel-calc-units
       '(("c"
          (lambda (arg) (calc-convert-units nil (cdr arg)))
          "convert")))
    )
  #+END_SRC

** deprecated functions

   ivy-switch-buffer-map now has a kill buffer action

   #+BEGIN_SRC emacs-lisp :tangle no
     (defun amd/ivy-kill-buffer ()
       (interactive)
       (kill-buffer ivy--current)
       (ivy--reset-state ivy-last))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     (defhydra hydra-counsel-switch-buffer (:color pink)
       "Buffer Actions"
       ("k" amd/ivy-kill-buffer)
       ("gg" ivy-beginning-of-buffer)
       ("n" ivy-next-line)
       ("e" ivy-previous-line)
       ("G" ivy-end-of-buffer)
       ("o" keyboard-escape-quit :exit t)
       ("C-g" keyboard-escape-quit :exit t)
       ("i" nil))
     (define-key ivy-switch-buffer-map (kbd "C-b") 'hydra-counsel-switch-buffer/body)
   #+END_SRC

   counsel now has a builtin descbinds search

   #+BEGIN_SRC emacs-lisp :tangle no
     (defun amd/display-binds ()
       (interactive)
       (ivy-read "keys: "
       (mapcar
        (lambda (keys) (cons
                        (format "%16s  %s" (car keys) (cdr keys))
                        (car keys)))
          (which-key--get-current-bindings))
       :action (lambda (key) (message key))))
   #+END_SRC

   counsel now has a builtin pt search

   #+BEGIN_SRC emacs-lisp :tangle no
     (defun amd/counsel-pt-function (string &optional _pred &rest _unused)
       "Grep in the current directory for STRING."
       (if (< (length string) 3)
           (counsel-more-chars 3)
         (let ((default-directory counsel--git-grep-dir)
               (regex (counsel-unquote-regex-parens
                       (setq ivy--old-re
                             (ivy--regex string)))))
           (counsel--async-command
            (format "pt -e --nocolor --nogroup -- %S" regex))
           nil)))

     (defun amd/counsel-pt (&optional initial-input initial-directory)
       "Grep for a string in the current directory using pt.
     INITIAL-INPUT can be given as the initial minibuffer input."
       (interactive)
       (setq counsel--git-grep-dir (or initial-directory default-directory))
       (ivy-read "pt: " 'amd/counsel-pt-function
                 :initial-input initial-input
                 :dynamic-collection t
                 :history 'counsel-git-grep-history
                 :action #'counsel-git-grep-action
                 :unwind (lambda ()
                           (counsel-delete-process)
                           (swiper--cleanup))))
   #+END_SRC

* fun

  #+BEGIN_SRC emacs-lisp
    (use-package zone
      :config
      ;; (zone-when-idle 180)
      (defun zone-choose (pgm)
        "Choose a PGM to run for `zone'."
        (interactive
         (list
          (completing-read
           "Program: "
           (mapcar 'symbol-name zone-programs))))
        (let ((zone-programs (list (intern pgm))))
          (zone))))

    (use-package retris
      :load-path "retris"
      :init
      (add-to-list 'evil-emacs-state-modes 'retris-mode))

    (use-package 2048-game
      :init
      (add-to-list 'evil-emacs-state-modes '2048-mode))
  #+END_SRC

* org

** Help docs

   [[info:org#Using%20header%20arguments][info:org#Using header arguments]]
   [[info:org#Specific%20header%20arguments][info:org#Specific header arguments]]
   [[info:org#Structural%20markup%20elements][info:org#Structural markup elements]] ([[http://orgmode.org/org.html#Markup][The Org Manual - Markup Syntax]])

** use-package org

  #+BEGIN_SRC emacs-lisp
    (use-package org
      :defer t
      :init
      (setq org-default-notes-file "~/org/todo.org")
      (setq org-ellipsis "↩") ;; ≫↩…•◐▪►■□▢
      ;; (setq org-display-internal-link-with-indirect-buffer t)

      ;; Open file links in the same buffer
      (setq
       org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                              (vm-imap . vm-visit-imap-folder-other-frame)
                              (gnus . org-gnus-no-new-news)
                              (file . find-file)
                              ;; (file . find-file-other-window)
                              (wl . wl-other-frame)))


      ;; (setq org-bullets-bullet-list (quote ("■" "■" "■" "■" "■" "■" "■" "■")))
      ;; (setq org-bullets-bullet-list (quote ("" "*" "*" "*" "*" "*" "*" "*")))
      (setq org-hide-leading-stars t) ;; can be used instead of org-bullets
      (setq org-catch-invisible-edits 'show)
      (setq org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
      (setq org-src-window-setup 'current-window)
      (setq org-fontify-whole-heading-line t
            org-fontify-done-headline t
            org-fontify-quote-and-verse-blocks t)
      (setq org-display-inline-images t)
      (setq org-todo-keywords '((sequence "TODO" "DOING" "DONE")))

      ;; (setq org-priority-regexp ".*?\\(\\[P\\([A-Z0-9]\\)\\] ?\\)")

      (evil-define-minor-mode-key 'normal 'org-src-mode (kbd "C-s") 'org-edit-src-save)
      (evil-define-minor-mode-key 'insert 'org-src-mode (kbd "C-s") (lambda() (interactive) (org-edit-src-save) (evil-normal-state)))

      :general
      (:states '(normal)
       :keymaps '(org-mode-map)
        "N" 'org-next-visible-heading
        "E" 'org-previous-visible-heading
        "L" 'org-forward-heading-same-level
        "H" 'org-backward-heading-same-level
        "X" 'org-todo
        "o" 'evil-open-below
        "O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading-respect-content))
        "^" 'org-beginning-of-line
        "$" 'org-end-of-line
        "<" 'org-shiftmetaleft
        ">" 'org-shiftmetaright
        "-" 'org-cycle-list-bullet
        "<tab>" 'org-cycle
        "f" 'ace-link-org)

      :config
      (add-to-list 'org-agenda-files org-default-notes-file)
      (add-to-list 'org-agenda-files "~/org/cal.org")

      ;; prettify-symbols-mode only operates on strings
      ;; (add-hook 'org-mode-hook 'prettify-symbols-mode)
      ;; (add-hook 'org-mode-hook (lambda () (push '((regexp-quote "^**") . " *") prettify-symbols-alist)))

      ;; #+STARTUP: odd
      ;; #+STARTUP: indent
      ;; #+STARTUP: hidestars
      ;; (add-hook 'org-mode-hook 'org-bullets-mode)
      (add-hook 'org-mode-hook 'flyspell-mode)
      ;; (add-hook 'org-mode-hook 'pandoc-mode)

      (defun amd/use-default-paragraph-delimiters ()
        (setq paragraph-start (default-value 'paragraph-start)
              paragraph-separate (default-value 'paragraph-separate)))
      (add-hook 'org-mode-hook 'amd/use-default-paragraph-delimiters)

      ;; Don't really need our own minor mode to make evil keybindings
      ;; (define-minor-mode evil-org-mode
      ;;   "Buffer local minor mode for evil-org"
      ;;   :init-value nil
      ;;   ;; :lighter " EvilOrg"
      ;;   :keymap (make-sparse-keymap) ; defines evil-org-mode-map
      ;;   :group 'evil-org)
      ;; (add-hook 'org-mode-hook 'evil-org-mode) ;; only load with org-mode

      (add-hook 'org-mode-hook
                (lambda ()
                  (define-key evil-inner-text-objects-map "h" #'er/mark-org-parent)
                  (define-key evil-inner-text-objects-map "c" #'er/mark-org-code-block)
                  (setq evil-want-fine-undo 'yes)))

      (add-hook 'org-mode-hook
                (lambda ()
                  (add-to-list (make-local-variable 'company-backends)
                               'company-ispell)))

      (defun evil-org-eol-call (fun)
        "Go to end of line and call provided function.
    FUN function callback"
        (end-of-line)
        (funcall fun)
        (evil-append nil))

      ;; (advice-add 'org-next-visible-heading :after #'recenter) ;; this doesn't work with recenter?
      (defadvice org-next-visible-heading (after advice-for-org-next-visible-heading activate) (recenter))
      ;; (advice-add 'org-previous-visible-heading :after #'recenter) ;; this doesn't work with recenter?
      (defadvice org-previous-visible-heading (after advice-for-org-previous-visible-heading activate) (recenter))

      (defadvice org-forward-heading-same-level (after advice-for-org-forward-heading-same-level activate) (recenter))
      (defadvice org-backward-heading-same-level (after advice-for-org-backward-heading-same-level activate) (recenter))

      ;; ;; rebind some existing org-mode maps
      ;; (mapc
      ;;  (lambda (state)
      ;;    (evil-define-key state org-mode-map
      ;;      (kbd "M-e") (lambda () (interactive) (tmux-window-navigation/move-up))   ;; was org-forward-sentence
      ;;      (kbd "M-h") (lambda () (interactive) (tmux-window-navigation/move-left)) ;; was org-mark-element
      ;;    ))
      ;;  '(normal insert))

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((shell . t)
         (python . t)
         (ruby . t)
         (ditaa . t)
         (sqlite . t)
         (perl . t)
         (emacs-lisp . t)
         ))

      (setq org-babel-ruby-command "~/.rbenv/shims/ruby")

      (defun amd/clipboard-html-to-org ()
        "Convert clipboard contents from HTML to Org and then paste (yank)."
        (interactive)
        (require 'dash)
        (kill-new (shell-command-to-string "osascript -e 'the clipboard as \"HTML\"' | ruby -ne 'puts([$_[10..-3]].pack(\"H*\"))' | pandoc -f html -t org"))
        (yank))

      (defun amd/clipboard-org-to-html (begin end)
        "Convert the org region to html and put it on the clipboard."
        (interactive "r")
        (require 'dash)
        (let* ((old-buffer (current-buffer)))
          (with-temp-buffer
            (insert-buffer-substring old-buffer begin end)
            (shell-command-on-region (point-min) (point-max)
                                     "pandoc -f org -t html"; | ruby -e 'STDOUT.write(\"«data HTML\"+STDIN.read.unpack(\"H*\").first.upcase.chomp+\"»\" )'"
                                     (current-buffer) t)

            (let ((hex-encoded-string (->> (string-to-list (buffer-string))
                                           (--map (format "%02X" it))
                                           (-reduce 'concat))))
              (message (shell-command-to-string (concat "osascript -e \"set the clipboard to «data HTML" hex-encoded-string "»\"")))))
          (evil-normal-state)
          ))

      (defun org-agenda-cts ()
        (let ((args (get-text-property
                     (min (1- (point-max)) (point))
                     'org-last-args)))
          (nth 2 args)))

      (defhydra hydra-org-agenda-view (:hint none)
        "
    _d_: ?d? day        _g_: time grid=?g? _a_: arch-trees
    _w_: ?w? week       _[_: inactive      _A_: arch-files
    _t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?
    _m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
    _y_: ?y? year       _q_: quit          _L__l__c_: ?l?
    "
        ("SPC" org-agenda-reset-view)
        ("d" org-agenda-day-view
         (if (eq 'day (org-agenda-cts))
             "[x]" "[ ]"))
        ("w" org-agenda-week-view
         (if (eq 'week (org-agenda-cts))
             "[x]" "[ ]"))
        ("t" org-agenda-fortnight-view
         (if (eq 'fortnight (org-agenda-cts))
             "[x]" "[ ]"))
        ("m" org-agenda-month-view
         (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
        ("y" org-agenda-year-view
         (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
        ("l" org-agenda-log-mode
         (format "% -3S" org-agenda-show-log))
        ("L" (org-agenda-log-mode '(4)))
        ("c" (org-agenda-log-mode 'clockcheck))
        ("f" org-agenda-follow-mode
         (format "% -3S" org-agenda-follow-mode))
        ("a" org-agenda-archives-mode)
        ("A" (org-agenda-archives-mode 'files))
        ("r" org-agenda-clockreport-mode
         (format "% -3S" org-agenda-clockreport-mode))
        ("e" org-agenda-entry-text-mode
         (format "% -3S" org-agenda-entry-text-mode))
        ("g" org-agenda-toggle-time-grid
         (format "% -3S" org-agenda-use-time-grid))
        ("D" org-agenda-toggle-diary
         (format "% -3S" org-agenda-include-diary))
        ("!" org-agenda-toggle-deadlines)
        ("["
         (let ((org-agenda-include-inactive-timestamps t))
           (org-agenda-check-type t 'timeline 'agenda)
           (org-agenda-redo)))
        ("q" (message "Abort") :exit t))

      (add-hook 'org-agenda-mode-hook (lambda () (define-key org-agenda-mode-map "v" 'hydra-org-agenda-view/body)))
    )
  #+END_SRC

** org-capture

   - [[info:org#Capture%20templates][info:org#Capture templates]]
   - [[info:org#Template%20expansion][info:org#Template expansion]]

   #+BEGIN_SRC emacs-lisp
     (use-package org-capture
       :config
       (setq org-capture-templates
             '(
               ("f" "file-link" entry (file+headline org-default-notes-file "Inbox")
                "* %f%?\n  %a")
               ("w" "website with custom title, date, link, and body" entry (file+headline org-default-notes-file "Inbox")
                "* %^{Title}\n\n  Source: %u, %c\n\n  %i\n"
                :empty-lines 1)
               ("c" "code with custom title, date, link" entry (file+headline org-default-notes-file "Inbox")
                "* %^{Title}\n\n  #+BEGIN_SRC %^{language}\n  %i\n  #+END_SRC\n\n  Source: %u, %c\n"
                :empty-lines 1)
               ;; ("e" "mu4e email" entry (file+headline org-default-notes-file "Inbox")
               ;; "* %?\n  SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n  %a")
               ("t" "task" entry (file+headline org-default-notes-file "Inbox")
                "* TODO [#A] %?\n  SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n  %a\n\n  %i\n")
               ))
       (add-hook 'org-capture-mode-hook 'evil-insert-state))
  #+END_SRC

** kanban.el
   #+BEGIN_SRC emacs-lisp
     (use-package kanban
       :init
       (setq kanban-max-column-width 80))
   #+END_SRC

** toc-org
   #+BEGIN_SRC emacs-lisp
     (use-package toc-org
       :config
       (add-hook 'org-mode-hook 'toc-org-enable))
   #+END_SRC

** org-protocol

   #+BEGIN_SRC emacs-lisp
    (use-package org-protocol)
   #+END_SRC

*** Easy Templates

    Typing ~<s~ followed by ~TAB~ will expand blocks.

    Supported Types: [[info:org#Easy%20templates][info:org#Easy templates]] ([[http://orgmode.org/org.html#Easy-templates][The Org Manual - Easy Templates]])

    #+BEGIN_SRC emacs-lisp
      (defun amd/org-insert-code-block ()
        (interactive)
        (org-complete-expand-structure-template
         (point)
         (--first (equal (car it) "s") org-structure-template-alist)))

      (evil-define-key 'insert org-mode-map (kbd "C-b") 'amd/org-insert-code-block)
    #+END_SRC

*** Chrome bookmarks

**** org-capture

     #+BEGIN_SRC fundamental :tangle no
     javascript:location.href = 'org-protocol://capture://'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection());
     #+END_SRC

**** org-store-link

     #+BEGIN_SRC fundamental :tangle no
     javascript:location.href = 'org-protocol://store-link://'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection());
     #+END_SRC

**** =org-protocol.desktop=

     #+BEGIN_SRC fundamental :tangle (if (eq system-type 'gnu/linux) "~/.local/share/applications/org-protocol.desktop" "no")
       [Desktop Entry]
       Name=org-protocol
       Exec=emacsclient -n %u
       Type=Application
       Terminal=false
       Categories=System;
       MimeType=x-scheme-handler/org-protocol
       Icon=emacs.svg
       Comment=
     #+END_SRC

*** Org 9 New Style Links

    New org-protocol key=value syntax

    Org-protocol can now handle query-style parameters such as:

    org-protocol://store-link?url=http:%2F%2Flocalhost%2Findex.html&title=The%20title
    org-protocol://capture?template=x&title=Hello&body=World&url=http:%2F%2Fexample.com

    Old-style links such as

    org-protocol://store-link:/http:%2F%2Flocalhost%2Findex.html/The%20title
    continue to be supported.

    If you have defined your own handler functions for org-protocol-protocol-alist,
    change them to accept either a property list (for new-style links) or a string
    (for old-style links). Use org-protocol-parse-parameters to convert old-style
    links into property lists.


*** Mac OS Setup

    [[http://orgmode.org/worg/org-contrib/org-protocol.html#orgheadline6][org-protocol.el – Mac OS X setup]] doesn't work anymore according to [[https://github.com/neil-smithline-elisp/EmacsClient.app/issues/3][Issue #3 · neil-smithline-elisp/EmacsClient.app]].

**** Step 1. Create an application

     - Launch the Script Editor application and create a new document
     - Copy-and-paste the following code into the new document
     - Change "/usr/local/bin/emacsclient" to path to =emacsclient= on your system
     - Save it in /Application/ (not the default /Script/) File Format as
       =org-protocol.app=

     #+BEGIN_SRC fundamental :tangle no
       on open location this_URL
         do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient \"" & this_URL & "\""
       end open location
     #+END_SRC

**** Step 2. Configure the application

     - Navigate to the application (i.e., =org-protocol.app=) in the Finder, then
       right-click on it and select =Show Package Contents=. Now go into the
       =Contents= folder and open =Info.plist=
     - Add the following code to the file, making sure to keep all existing
       key/string pairs intact:


     #+BEGIN_SRC fundamental :tangle no
       <key>CFBundleURLTypes</key>
       <array>
         <dict>
           <key>CFBundleURLName</key>
           <string>org-protocol handler</string>
           <key>CFBundleURLSchemes</key>
           <array>
             <string>org-protocol</string>
           </array>
         </dict>
       </array>
     #+END_SRC

**** Notes

***** Emacs doesn't activate?

      #+BEGIN_SRC fundamental :tangle no
        on open location this_URL
          do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient \"" & this_URL & "\" && open -a Emacs"
        end open location
      #+END_SRC

* elisp links

  [[info:elisp#Prefix%20Command%20Arguments][info:elisp#Prefix Command Arguments]]

* outorg & outshine

  Still experimenting with the below, may switch to it instead of using an
  org-mode settings file.

  #+BEGIN_SRC emacs-lisp

    (eval-and-compile
      (defvar outline-minor-mode-prefix "\M-#"))

    ;; (use-package outline)

    ;; (use-package outorg
    ;;   :after outline)

    ;; (use-package outshine
    ;;   :after outorg
    ;;   :config
    ;;   (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
    ;;   (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode))
  #+END_SRC

* edit-with-emacs and cvim

  Chrome browser extensions:
  - [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh][Edit with Emacs]]
  - [[https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh?hl=en][cvim]]

  =amd/parse-json= will make this plugin work with [[https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh?hl=en][cvim]].
  cvim sends a json payload to the edit server instead of the raw text.

  #+BEGIN_SRC emacs-lisp
    (use-package edit-server
      :commands (edit-server-start)
      :init
      (defun amd/parse-json ()
        (interactive)
        (goto-char (point-min))
        (let ((parsed-json (json-read)))
          (erase-buffer)
          (insert (alist-get 'data parsed-json))))
      (add-hook 'edit-server-edit-mode-hook #'amd/parse-json)
    )
  #+END_SRC

* neotree

  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :commands (neotree)
      :init
      (setq neo-smart-open t)
      (add-to-list 'evil-emacs-state-modes 'neotree-mode))
  #+END_SRC

* view large files

  #+BEGIN_SRC emacs-lisp
    (use-package vlf-setup)
  #+END_SRC

* emacs and git on windows

  Installing emacs and git without using cygwin

  - https://sourceforge.net/projects/emacsbinw64/
  - https://git-scm.com/download/win
  - http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html (optional)

  Download above portable versions and extract to

  - =C:\Users\anthony\emacs=
  - =C:\Users\anthony\PortableGit=
  - =C:\Users\anthony\PortableGit\cmd= (plink goes here)

  Launch emacs with this bat file.

  #+BEGIN_SRC fundamental :tangle (if (eq system-type 'windows-nt) "C:/Users/anthony/runemacs.bat" "no")
    SET GIT=PortableGit
    SET GIT_HOME=%CD%\%GIT%
    SET GIT_ASKPASS=git-gui--askpass
    SET SSH_ASKPASS=git-gui--askpass
    SET PATH=%GIT_HOME%\bin;%GIT_HOME%\mingw64\bin;%GIT_HOME%\cmd;%GIT_HOME%\usr\bin;%GIT_HOME%\mingw64\libexec\git-core;%PATH%
    SET HOME=.\
    emacs\bin\runemacs.exe %*
  #+END_SRC

  More info here https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows

  With the above this isn't necessary.

  #+BEGIN_SRC emacs-lisp :tangle no
    (when (eq system-type 'windows-nt)
      (add-to-list 'exec-path "C:\\Users\\anthony\\PortableGit\\bin"))
  #+END_SRC

* tramp

  #+BEGIN_SRC emacs-lisp
    (use-package tramp
      :init
      ;; (setq tramp-verbose 6)
      ;; (getenv "GIT_SSH")
      ;; (shell-command-to-string (concat (getenv "GIT_SSH") " -V"))

      (if (eq system-type 'windows-nt)
          (progn
            (setenv "GIT_SSH" "C:\\Users\\anthony\\PortableGit\\cmd\\plink.exe")
            (setq tramp-default-method "plink"))
        (setq tramp-default-method "ssh")))
  #+END_SRC
